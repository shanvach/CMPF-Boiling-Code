[ifndim]
args=p
line_indents=0
definition = 
 #if NDIM > p
 
[endif]
line_indents=0
definition =
 #endif
 
[ifdef]
line_indents=0
args=x1
definition=
 #ifdef x1
 
[else]
line_indents=0
definition=
 #else

[loop_end_3d]
definition =
        end do
      end do
   end do

[loop_3d]
args=limits
definition =
    do k=limits(LOW,KAXIS),limits(HIGH,KAXIS)
         do j=limits(LOW,JAXIS),limits(HIGH,JAXIS)
             do i=limits(LOW,IAXIS),limits(HIGH,IAXIS)

[loop_3d_alt]
args=limits
definition =
    do i3=limits(LOW,KAXIS),limits(HIGH,KAXIS)
         do i2=limits(LOW,JAXIS),limits(HIGH,JAXIS)
             do i1=limits(LOW,IAXIS),limits(HIGH,IAXIS)


[loop_3d_plus]
args=limits,p1,p2,p3
definition =
    do k=limits(LOW,KAXIS),limits(HIGH,KAXIS)+K3D*p3
         do j=limits(LOW,JAXIS),limits(HIGH,JAXIS)+K2D*p2
             do i=limits(LOW,IAXIS),limits(HIGH,IAXIS)+p1


[loop_3d_ext]
args=limits,p1,p2,p3
definition =
    do k=limits(LOW,KAXIS)-K3D*p3,limits(HIGH,KAXIS)+K3D*p3
         do j=limits(LOW,JAXIS)-K2D*p2,limits(HIGH,JAXIS)+K2D*p2
             do i=limits(LOW,IAXIS)-p1,limits(HIGH,IAXIS)+p1

[bounds_3d]
args=limits
definition =
    limits(LOW,IAXIS):limits(HIGH,IAXIS),&
    limits(LOW,JAXIS):limits(HIGH,JAXIS),&
    limits(LOW,KAXIS):limits(HIGH,KAXIS)

[bounds_3d_plus]
args=limits,p1,p2,p3
definition =
    limits(LOW,IAXIS):limits(HIGH,IAXIS)+p1,&
    limits(LOW,JAXIS):limits(HIGH,JAXIS)+p2*K2D,&
    limits(LOW,KAXIS):limits(HIGH,KAXIS)+p3*K3D


[bounds_3d_ext]
args=limits,p1,p2,p3
definition =
    limits(LOW,IAXIS)-p1:limits(HIGH,IAXIS)+p1,&
    limits(LOW,JAXIS)-p2*K2D:limits(HIGH,JAXIS)+p2*K2D,&
    limits(LOW,KAXIS)-p3*K3D:limits(HIGH,KAXIS)+p3*K3D



[bounds_2d]
args=x1,x2,limits
definition =
    limits(LOW,x1AXIS):limits(HIGH,x1AXIS),&
    limits(LOW,x2AXIS):limits(HIGH,x2AXIS)

[bounds_2d_plus]
args=limits,p1,p2,x1,x2
definition =
    limits(LOW,x1AXIS):limits(HIGH,x1AXIS)+p2,&
    limits(LOW,x2AXIS):limits(HIGH,x2AXIS)+p1


[bounds_2d_ext]
args=limits,p1,p2,x1,x2
definition =
    limits(LOW,x1AXIS)-p2:limits(HIGH,x1AXIS)+p2,&
    limits(LOW,x2AXIS)-p1:limits(HIGH,x2AXIS)+p1


[bounds_i]
args=limits
definition =
    limits(LOW,IAXIS):limits(HIGH,IAXIS)

[bounds_j]
args=limits
definition =
    limits(LOW,JAXIS):limits(HIGH,JAXIS)

[bounds_k]
args=limits
definition =
    limits(LOW,KAXIS):limits(HIGH,KAXIS)

[bounds_1d_plus]
args=x1,p,limits
definition =
    limits(LOW,x1AXIS):limits(HIGH,x1AXIS)+p

[bounds_1d_ext]
args=x1,p,limits
definition =
    limits(LOW,x1AXIS)-p:limits(HIGH,x1AXIS)+p

[tileDesc_use]
definition =
    use Grid_tile, ONLY: Grid_tile_t

[tileDesc_spec]
definition =
   type(Grid_tile_t)     :: tileDesc

[tileDesc_arg]
definition =
   type(Grid_tile_t),intent(in)     :: tileDesc

[tileDesc_get]
args =lim1,lim2,lim3,del
definition =
     lim1(:,:)=tileDesc%%limits
     lim2(:,:)=tileDesc%%blkLimitsGC
     lim3(:,:)=tileDesc%%grownLimits
     call tileDesc%%deltas(del)
     level=tileDesc%%level


[tileDesc_declare]
args = lim1,lim2,lim3
definition =
   integer :: level
   integer, dimension(LOW:HIGH,MDIM) :: lim1,lim2,lim3
   real,dimension(MDIM) :: deltas


[iter_use]
definition =
  use Grid_interface, ONLY : Grid_getTileIterator, Grid_releaseTileIterator
  use Grid_tile,         ONLY : Grid_tile_t
  use Grid_iterator,     ONLY : Grid_iterator_t

[iter_declare]
args=lim1,lim2,lim3,Uin
definition =
   type(Grid_iterator_t) :: itor
   @M tileDesc_spec
   integer, dimension(LOW:HIGH,MDIM) :: lim1,lim2,lim3
   real,dimension(:,:,:,:),pointer :: Uin


[iter_all_begin]
args=x1,t1,lim1,lim2,del,Uin
definition = 
  call Grid_getTileIterator(itor, x1, tiling=t1)
  do while(itor%%isValid())
     call itor%%currentTile(tileDesc)
     @M tileDesc_get(lim1,lim2,grownLimits,del)
     call tileDesc%%getDataPtr(Uin, CENTER)

[iter_end]
args=Uin
definition =
         call tileDesc%%releaseDataPtr(Uin,CENTER)
         call itor%%next()
      end do !!block loop
      call Grid_releaseTileIterator(itor)

[iter_level_begin]
args=x1,t1,l1,lim1,lim2,del,Uin
definition=
      call Grid_getTileIterator(itor,x1,level=l1,tiling=t1)
      do while(itor%%isValid())
         call itor%%currentTile(tileDesc)
 	 @M tileDesc_get(lim1,lim2,grownLimits,del)
	 call tileDesc%%getDataPtr(Uin, CENTER)


[mapLimits]
args=blimits,blimitsGC,mlimits,mlimitsGC
definition=
   mlimits(LOW,:)=blimits(LOW,:)-blimitsGC(LOW,:)+1
   mlimits(HIGH,:)=blimits(HIGH,:)-blimits(LOW,:)+mlimits(LOW,:)
   mlimitsGC(LOW,:)=1
   mlimitsGC(HIGH,:)=blimitsGC(HIGH,:)-blimitsGC(LOW,:)+1