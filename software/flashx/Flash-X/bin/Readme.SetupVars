
Setup Variables are variables whose value is set from the command line.
The Config files can use the values of these variables (not change them)
to make decisions. For example, based on the value of the variable 
"Grid", the Grid/GridMain/Config can decide to make
UG or paramesh the default. 

There are two kinds of setup Variables: 

* Those automatically created by the setup script
* Those specified in the command line

Variables queried by the Config file if not initialized is
assumed to be "" (empty string)

Automatic Setup Variables for Code Units
----------------------------------------

For every top level unit, X, setup creates a boolean variable
called "withX".  This variable is set to True IFF some subunit of 
X is EXPLICTLY INCLUDED IN THE COMMAND LINE OF THE SETUP SCRIPT.

For example, the "IO/IOMain/Config" automatically includes "IO/IOParticles"
if it finds "withParticles=True".

Other Setup Variables
---------------------

* Other setup variables can generally be specified in the command line.
  In some cases (marked ++ below), they are also generated automatically
  by the setup script as a result of using some other options.
* Specifying values for arbitrary variables is useful only if there
  is some config file which uses the variable, except for some
  cases (marked +++ below) where the setup script itself takes
  some additional action. 
* If any of these variables are not specified, they are set to "".
  To ensure this, the USESETUPVARS Config keyword should be used
  in the Config file before testing the variable's value.
  The Config files are set up so that, if a variable is set to "",
  the FLASH default gets picked.
* All choices are orthogonal. However certain combinations which 
  are not implemented will raise a Setup Error.
* Setting the values of these variables does not imply that
  the Top level unit using it is automatically added.
* If you set the variable and include the top level unit,
  the variable ensures that the right implementation gets picked up.

USEFUL VARIABLES 
----------------

* Name  : Grid
  Type  : String
  Values: UG, PM40, PM4DEV, PM2, Samrai

  Selects which Grid to include by default. 

* Name  : IO
  Type  : String
  Values: hdf5, pnetcdf, MPIHybrid, MPIDump, direct

  Selects what kind of IO to use. 

* Name  : parallelIO
  Type  : Boolean
  Values: True, False

  Selects if we should use parallelIO or serialIO. 


DEV:CD (Looks like the following were never used (always empty strings).  
Harder to introduce now because we have multiple particle types)
--------------------------------------------------------------
* Name  : PartMapping
  Type  : String
  Values: meshWeighting, CIC, Quadratic

  Selects which Particle mapping to be used. 

* Name  : PartIntegrator
  Type  : String
  Values: Midpoint, EulerPassive, PredictorCorrector, PredCorrFLASH2, 
          Leapfrog, LeapfrogCosmo, EulerActive, ParticleMesh, DPMTA, Charged

  Selects the type of time integration.

* Name  : PartInit
  Type  : String
  Values: withDensity, Lattice

  Selects the initial location of the particles
--------------------------------------------------------------



* Name  : fixedBlockSize
  Type  : Boolean
  Remark: Automatically set based on -nofbs and -fbs   (++)
  
  Is fixed block size being used? selecting -nofbs and -fbs
  setup option adjusts the value of this variable as well.

* Name  : nDim
  Type  : integer
  Values: 1, 2, 3
  Remark: Automatically set based on -1d, 2d, and -3d  (++)

* Name  : GridIndexReorder
  Type  : Boolean
  Remark: Automatically set based on -index-reorder    (++)

  If set to True, var index is after space indices in unk and related data structures.

* Name  : nxb
* Name  : nyb
* Name  : nzb
* Name  : maxBlocks
  Type  : integer
  Remark: Automatically set by setup script            (++)


* Name  : ParameshLibraryMode
  Type  : Boolean
  Remark: If true, the setup script will generate file
          amr_runtime_parameters from template amr_runtime_parameters.tpl
          found in either the object directory (preferred) or the
          setup script (bin) directory.                (+++)

  Selects whether Paramesh4 should be compiled in LIBRARY mode,
  i.e., with the preprocessor symbol LIBRARY defined.

* Name  : PfftSolver
  Type  : String
  Values: ,SimplePeriodicSolver,SoPeriodicSolverFD,HomBcTrigSolver,Generic_Direct,DirectSolver

  PfftSolver selects a PFFT solver variant when the hybrid
  (i.e, Multigrid with PFFT) Poisson solver is used.

* Name  : SplitDriver
  Type  : Boolean
  Remark: Automatically set True by +splitHydro shortcut

  If true, a Split Driver implementation is requested.

* Name  : Mtmmmt
  Type  : Boolean
  Remark: Automatically set True by +mtmmmt shortcut

  When set, this option activates the MTMMMT EOS

* Name  : mgd_meshgroups
  Type  : Integer
  Remark: Required when MGD is used

  mgd_meshgroups * meshCopyCount sets the MAXIMUM number of radiation
  groups that can be used in a simulation. The ACTUAL number of groups
  (which must be less than mgd_meshgroups * meshCopyCount) is set by
  the rt_mgdNumGroups runtime parameter.

* Name  : species
  Type  : Comma seperated list of strings (e.g. species=air,sf6)
  Remark: Required by certain units which use multispecies unit

  This setup variable can be used as an alternative specifying species
  using the SPECIES Config file directive by listing the species in
  the setup command. Some units, like the Multispecies Opacity unit,
  will ONLY work when the species setup variable is set. This is
  because they use the species name to automatically create runtime
  paramters which include the species names.

* Name  : ed_maxPulses
  Type  : Integer
  Remark: Maximum number of laser pulses (defaults to 5)

* Name  : ed_maxBeams
  Type  : Integer
  Remark: Maximum number of laser beams (defaults to 6)

* Name  : ExtraGravVars
  Type  : Boolean

  If true, unsplit Hydro and sink Particles are requested to use extra
  solution variables for storing an intermediate state of gravity.

* Name  : MoreDataFiles
  Type  : Boolean
  Remark: Link or copy more DATAFILES (defaults to False, since FLASH 4.4)

  If true, link or copy more data files to the object directory from
  the source tree. Data files often contain precomputed tabular data
  used by several code units, and are linked or copied using the
  DATAFILES Config directive. Some units check the value of
  MoreDataFiles to decide whether some optional data files
  should be linked or copied. This may apply to data files that
  are intended as examples; data files that are essential to the
  functioning of a unit implementation should always be linked
  or copied if they are available in the source tree.

* Name  : IgnoreLabDependencies
  Type  : Boolean

  If true, ignore certain dependencies that are normally added
  automatically, to help users avoid unphysical situations, based
  on typical Lab use cases.

* Name  : NoLevelwideFluxes
  Type  : Boolean
  Remark: Set True by +nolwf shortcut

  If true, do not include code for supporting or using fluxes
  that are stored on a level-wide bases, but support and use
  interfaces that require only local per-block flux arrays.

* Name  : useAmrexFlashFluxreg
  Type  : Boolean

  If true, the Amrex implementation of the AMR Grid is instructed
  to use the amrex_flash_fluxregister_module of AMReX, rather than
  the classic amrex_fluxregister_module, for purposes of flux
  correction. This needs to be explicitly requested when
  NoLevelwideFluxes=True is used for flux correction with the
  Amrex Grid.

* Name  : Bittree
  Type  : Boolean

  If true, Paramesh uses a bitmap to store global tree metadata.
  For more details, see the Bittree implementation in Paramesh.

* Name  : AsyncHDF5
  Type  : Boolean

  If true, use async version of HDF5


* Name  : AltMorton
  Type  : Boolean

  If true, the Morton ordering of blocks is altered so parents
  are put in between their children in the list.

* Name  : ImprovedSort
  Type  : Boolean

  Modifies the algorithm by which Paramesh assigns blocks to MPI
  ranks. Defaults to false. If true, the sorting algorithm is changed
  so that there is always at least one block on each rank as long as
  nblks>=nprocs.

* Name  : ParticlesBirthCpu
  Type  : Boolean

  Defaults to false for Paramesh. If true, particles in checkpoint and
  particle files will have a property named "cpu", and particles are
  unique identified (across different files generated from the same
  run and even across restarts) by (tag, cpu) pairs.  This behavior is
  always enabled in cnfigurations that use Particles and the Amrex
  Grid implementation, and for so-called mesh-owned particles there is
  currently now mechanism for changing this.
  Note: when neither ParticlesBirthCpu=True is in effect nor Amrex is
  used, particles are uniquely identified by the "tag" property alone.

* Name  : StaticHyArrays
  Type  : Boolean

  *** ONLY FOR PERFORMANCE EXPERIMENTS WITH THE SOD SIMULATION ***
  Defaults to False. If True, simulation-specific alternatives of
  several source files are used instead of the ususal versions of
  those source files from the physics/Hydro/HydroMain tree.
  In these alternative versions, arrays sig,lambda,leftEig,rghtEig,
  scrch_Ptr, scrchFace[XYX]Ptr, and grav[XYZ] are not allocated
  and deallocated separately for each block on the heap, and
  permanent ('static') arrays with fixed bounds are used instead.
  NOTE: This can only work properly when FIXEDBLOCKSIZE is in effect
  (see also fixedBlockSize above), therefore the code is expected to
  be incorrect in Flash-X with UG.

* Name  : IOWriteGridFiles
  Type  : Boolean

  Defaults to False. If True, IO unit will write _hdf5_grd_ files which
  can be used to generate xmf hyperslabs to visualize data in ParaView.
  The logic of creating xmf files is implemented via the command line
  tool - FlashKit: https://github.com/akashdhruv/FlashKit

* Name  : HydroGuardcells
  Type  : Integer

  Can be used to generate a GUARDCELLS Config directive with a
  nondefault value in some Hydro implementations, under certain
  conditions. Recognized by the Spark Hydro implementation when
  it is used in its nontelescoping variant.
  Experimentally, recognized also by "unsplit" and "simpleUnsplit"
  Hydro implementations.

* Name  : useWeaklib
  Type  : Boolean
  Remark: Automatically set to True by +weaklib shortcut
  
  If true, units querying this setup variable (e.g. Thornado) will
  require that the weaklib library is built during setup and
  subsequently linked against

* Name  : useMoL
  Type  : Boolean
  Remark: Automatically set to True by +MoL shortcut
  
  If true, units querying this setup variable can make setup-time
  choices for MoL compatibility

* Name  : MoL_integrator
  Type  : String
  Values: ERK, IMEX, MR
  Remark: Automatically set by +MoLERK, +MoLIMEX, +MoLMR shortcuts
  
  Selects the explicit RK (ERK), implicit-explicit (IMEX), or multi-
  rate IMEX (MR) MoL integrator implementation

* Name  : InsPresLaplacian
  Type  : Boolean

  Default to False. Used to select Laplacian pressure solver for
  variable density Incompressible Navier-Stokes Simulations

* Name  : Incomp
  Type  : Boolean

  Defaults to False. Used to apply unit specific customization for
  Incompressible Navier-Stokes Simulations

* Name  : InsForceInOut
  Type  : Boolean

  Defaults to False. If True, will apply inlet/outlet forcing

* Name  : InsLSDamping
  Type  : Boolean

  Defaults to False. If True, will apply apply level-set damping if
  InsForceInOut is True

* Name  : InsExtras
  Type  : Boolean

  Defaults to False. If True, will include physics/IncompNS/IncompNSExtras

* Name  : Profiler
  Type  : String
  Values: Hpctoolkit, Mpihpm 
  Remark: Automatically set by +hpctoolkit, +mpihpm

  Selects which Profiler to use.

* Name  : Milhoja
  Type  : String

  This must be provided if the Milhoja Grid implementation or Milhoja
  Orchestration units are used.  Its value is specified as either
        Milhoja=<grid backend> or
        Milhoja=<grid backend>,<runtime backend>,<offloading>
  If the Orchestration unit is not used and the 3 argument version is
  provided, then the last two values are ignored.
        <grid backend>    must be AMReX
        <runtime backend> either None or CUDA
        <offloading>      either None or OpenACC

* Name  : HeaterFluxBC
  Type  : Boolean

  Flag to activate flux boundary condition treatment for heater
