#!/bin/sh -f

# a simple script to take the setup_units file created by setup and
# produce a Fortran 90 Unit that returns the number of units
# used to build the FLASH executable and a character array containing
# their names

# set the maximum length of a character string
max_length=80

units=`cat setup_units | cut -c 1-$max_length`

# count number of units
num_units=`wc -l setup_units |tr -dc 0-9`

    
# setup the program body
cat > setup_flashUnits.F90 << EOF

!!****f* object/setup_flashUnits
!!
!! NAME
!!
!!  setup_getFlashUnits
!!
!!
!! SYNOPSIS
!!
!!
!!  call setup_getFlashUnits(character(len=MAX_STRING_LENGTH) :: unit_names(1:$num_units))
!!
!!  call setup_getFlashUnits(character(len=MAX_STRING_LENGTH) :: unit_names(1:numUnits))
!!
!!
!! DESCRIPTION
!!
!!  Return a character array of size NUM_UNITS containing
!!  the names of all of the FLASH units used to assemble
!!  the current executable
!!
!!  The unit_names variable should be declared as
!!
!!    #include "constants.h"
!!  
!!    character (len=MAX_STRING_LENGTH) :: flash_units(numUnits)
!!
!!  or
!!
!!    character(len=MAX_STRING_LENGTH),ALLOCATABLE :: flash_units(:)
!!
!!
!!  The length of each character string is set to MAX_STRING_LENGTH,
!!  which is defined in the constants.h file.
!!  The proper number of elements to allocate, called numUnits above,
!!  can be inquired at run time with
!!
!!   call setup_getNumFlashUnits(numUnits)
!!
!!  so that an ALLOCATABLE array can be used for flash_units.
!!
!!***

  subroutine setup_getFlashUnits(unit_names)

#include "constants.h"
    implicit none

    integer, PARAMETER :: NUM_UNITS = $num_units
    character (len=MAX_STRING_LENGTH) :: unit_names(NUM_UNITS)

!! temporary holds the result of the cat/cut from the setup_unit -- it is
!! dimensioned to be the same size as the result from the cut so we do
!! not overflow.  
    character (len=$max_length) :: temporary

EOF

n=1

for unit in $units
do
  echo "    temporary = " \"$unit\" >> setup_flashUnits.F90
  echo "    unit_names($n) = " temporary\(1:min\(MAX_STRING_LENGTH,$max_length\)\) >> setup_flashUnits.F90
  echo "  " >> setup_flashUnits.F90
  n=`expr $n + 1`
done


    cat >> setup_flashUnits.F90 << EOF

    return

  end subroutine setup_getFlashUnits

  subroutine setup_getNumFlashUnits(numUnits)

    implicit none

    integer, intent(out) :: numUnits
    integer, PARAMETER :: NUM_UNITS = $num_units

    numUnits = NUM_UNITS

    return

  end subroutine setup_getNumFlashUnits

