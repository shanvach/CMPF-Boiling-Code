# This file defines shortcuts for the setup script.
# Each line starting with '#' is a comment line.

# each line is of the form
# shortcut:arg1:arg2:...:
#
# For example, the shortcut ug is defined as:
# ug:--with-unit=Grid/GridMain/:Grid=UG:
#
# To use the ug shortcut ad +ug to the setup line ie: ./setup Sod -auto +ug
# this is equivalent to typing in unit options with -unit=Grid/GridMain/UG 
# -unit=IO/IOMain/hdf5/serial/UG (because the appropriate IO is included by default)
# 
# These shortcuts can refer to each other. 
#
# The name of this file is hard coded into the setup script. But dont worry.
# You can define an environment variable SETUP_SHORTCUTS and set it to a
# ":" delimited set of filenames. Then the setup script will process those
# files (in that order) to define the shortcuts
#

# These options are always assumed to be given at beginning of command line,
# most of these can be overridden later.
default:--with-library=mpi:+io:+grid:-gridinterpolation=monotonic:FlashAvoidOrrery=True

tryAltFiles:-unit=Simulation/SimulationMain/alternativeFiles:AllowAlternativeFiles=Yes:IncludeAlternativeFiles=Yes

# io choices
noio:--without-unit=physics/sourceTerms/EnergyDeposition/EnergyDepositionMain/Laser/LaserIO:--without-unit=IO:
io:--with-unit=IO:
serialIO:parallelIO=False:
parallelIO:parallelIO=True:
hdf5:IO=hdf5:
# when async is complete remove IO=hdf5
asynchdf5:IO=hdf5:AsyncHDF5=True
pnetcdf:IO=pnetcdf:
hdf5TypeIO:+io:+parallelIO:+hdf5:typeIO=True
hdf5AsyncIO:+parallelIO:+asynchdf5
pnetTypeIO:+io:+parallelIO:+pnetcdf:typeIO=True

# other optional but useful stuff
nolog:-without-unit=monitors/Logfile:

# Choice of Grid
grid:-unit=Grid:
ug:+grid:Grid=UG:
pm40:+grid:Grid=PM40:
pm3:+pm40
amrex:Grid=Amrex:-unit=Grid/GridMain/AMR/Amrex:-index-reorder

# Using the Milhoja library only for the Grid implementation:
mh_grid:Grid=Milhoja:-unit=Grid/GridMain/AMR/Milhoja:-with-unofficial=Grid/GridMain/AMR/Milhoja:-index-reorder:Milhoja=AMReX
# Using the Milhoja library only for the Orchestration implementation: (also needs Milhoja=...)
mh_orch:-unit=Orchestration/OrchestrationMain/Milhoja:-with-unofficial=Orchestration/OrchestrationMain/Milhoja:-index-reorder

### For execute-style ORCHA ### (needs libmilhoja or libmilhoja_grid)
# Using the Milhoja library for Grid and Orchestration implementations, CPU tt config only:
mh_exec_cpu:+mh_grid:+mh_orch:-defines=RUNTIME_MUST_USE_TILEITER:Milhoja=AMReX,none,none
# Using the Milhoja library for Grid and Orchestration implementations, GPU tt configs via CUDA:
mh_exec:+mh_grid:+mh_orch:-defines=RUNTIME_MUST_USE_TILEITER:Milhoja=AMReX,CUDA,OpenACC
# Using the Milhoja library for Grid and Orchestration implementations, fake "GPU" tt configs on CPU:
mh_exec_fakecuda:+mh_grid:+mh_orch:-defines=RUNTIME_MUST_USE_TILEITER:Milhoja=AMReX,HOSTMEM,OpenACC

### For pushTile-style ORCHA ### (needs libmilhoja or libmilhoja_nogrid)
# Using the Milhoja library for the Orchestration implementation, CPU tt config only:
mh_push_cpu:+mh_orch:Milhoja=none,none,OpenACC
# Using the Milhoja library for the Orchestration implementation, GPU tt config via CUDA:
mh_push:+mh_orch:Milhoja=none,CUDA,OpenACC
# Using the Milhoja library for the Orchestration implementation, fake "GPU" tt configs on CPU:
mh_push_fakecuda:+mh_orch:Milhoja=none,HOSTMEM,OpenACC

### For any-style ORCHA ### (When needed, use +mh_grid *before* one of these shortcuts)
mh_cpu:+mh_orch:Milhoja=AMReX,none,OpenACC
mh_gpu:+mh_orch:Milhoja=AMReX,CUDA,OpenACC
mh_fakecuda:+mh_orch:Milhoja=AMReX,HOSTMEM,OpenACC

### Default Milhoja Shortcut ### (compatibility / maybe override for site)
milhoja:+mh_grid:+mh_gpu


# pm4dev_clean indicates a version of Paramesh closer to the one
# that can be downloaded from sourceforge.  pm4dev indicates a 
# modified version of Paramesh that includes a more scalable way
# of filling the surr_blks array.
# Note that FlashAvoidOrrery=True may already be set by the
# default entry established above.
pm4dev_basic:+grid:Grid=PM4DEV
pm4dev_clean:+pm4dev_basic:FlashAvoidOrrery=False
pm4dev:+pm4dev_basic:FlashAvoidOrrery=True
pm4dev_fixed:+pm4dev:ParameshLibraryMode=False

# Paramesh4 with fewer setup-derived constants hardwired as Fortran
# PARAMETERs and more arrays (holding grid metadata) allocated at
# runtime, compiled with LIBRARY defined.  Not tested much. - KW
pm4dev_dynamicmem:+pm4dev:ParameshLibraryMode=True

# NOTE: If pure hydro mode used with the USM solver, add +pureHydro in setup
#default optimized codes
usm:--with-unit=physics/Hydro/HydroMain/unsplit/MHD_StaggeredMesh
pureHydro:physicsMode=hydro

unsplitHydro:--with-unit=physics/Hydro/HydroMain/unsplit/OnlyHydro:-without-unit=physics/Hydro/HydroMain/split
uhd:--with-unit=physics/Hydro/HydroMain/unsplit/OnlyHydro:-without-unit=physics/Hydro/HydroMain/split

#unoptimized codes
uhdold:--with-unit=physics/Hydro/HydroMain/unsplit_old/OnlyHydro:FullScratchUseInUHD=True
usmold:--with-unit=physics/Hydro/HydroMain/unsplit_old/MHD_StaggeredMesh:--without-unit=physics/Hydro/HydroMain/split/MHD_8Wave
uhdoldWithGravPotUp:+uhdold:FullScratchUseInUHD=True
uhdoldWithSpeciesMassScalar:+uhdold:FullScratchUseInUHD=True

sHLL:-unit=physics/Hydro/HydroMain/simpleUnsplit/HLL
shd:+sHLL

# Support specific Hydro methods, which require an increased number of guard cells.
# Note that these may need to be combined with -nxb=... -nyb=... etc.,
# where the specified blocksize is greater than or equal to 12 (==2*GUARDCELLS).
supportPPMUpwind:SupportPpmUpwind=True

cube64:-nxb=64:-nyb=64:-nzb=64:
cube16:-nxb=16:-nyb=16:-nzb=16:
cube32:-nxb=32:-nyb=32:-nzb=32:

sqr64:-nxb=64:-nyb=64
sqr16:-nxb=16:-nyb=16
sqr32:-nxb=32:-nyb=32

# include Particles and IO for uniform grid
ptio:+ug:-with-unit=Particles:
# The following shortcut is used for checking FLASH with rectangular block
# sizes and non-fixed block size
rnf:-3d:-nxb=8:-nyb=16:-nzb=32:-nofbs:+ug:
nofbs:-nofbs:+ug:parallelIO=True:


###### Shortcuts to achieve setup script support for geometry-related
###### choices.  These shortcut now translate directly to setup options
###### newly created for curvilinear coordinate support in F3.0 alpha.
curvilinear:-curvilinear
cartesian:-geometry=cartesian
spherical:-geometry=spherical
polar:-geometry=polar
cylindrical:-geometry=cylindrical


# Some alternative combined shortcuts to request support for curvilinear coordinates.
# These specify necessary directories
# directly rather than relying on the -gridinterpolation=monotonic option. - KW
curv-pm2:+pm2:-unit=Grid/GridMain/paramesh/Paramesh2:-with-unit=Grid/GridMain/paramesh/Paramesh2/monotonic:
spherical-pm2:+pm2:+spherical

# shortcut to get passive particles initialization with density
PMptdens:-without-unit=Particles/ParticlesInitialization/ParticlesOwned/Lattice:-without-unit=Particles/ParticlesInitialization/ParticlesOwned/WithDensity/CellMassBins:-unit=Particles/ParticlesMain:-unit=Particles/ParticlesInitialization/ParticlesOwned/WithDensity:-particlemethods=TYPE=passive,INIT=With_Density

PMptdenscells:-without-unit=Particles/ParticlesInitialization/ParticlesOwned/Lattice:-unit=Particles/ParticlesMain:-unit=Particles/ParticlesInitialization/ParticlesOwned/WithDensity/CellMassBins:-particlemethods=TYPE=passive,INIT=With_Density

#shortcut to request longrange active particles
longrange:-with-unit=Particles/ParticlesMain/active/longRange/gravity/ParticleMesh

#make sure that the new implementation of the multipole is included
gravMpole:-with-unit=physics/Gravity/GravityMain/Poisson/Multipole:
noDefaultMpole:-without-unit=Grid/GridSolvers/Multipole
noMgrid:-without-unit=physics/Gravity/GravityMain/Poisson/Multigrid:
newMpole:+noMgrid:+noDefaultMpole:+gravMpole:-with-unit=Grid/GridSolvers/Multipole_new

mpi1:mpi1=True:-defines=FLASH_MPI1
mpi2:mpi2=True:-defines=FLASH_MPI2
mpi3:mpi3=True:-defines=FLASH_MPI3
libnbc:--with-library=libNBC:useLibNBC=True:-defines=FLASH_LIBNBC:+mpi3

# Threading shortcuts
threadBL:threadWithinBlock=0:threadBlockList=True:-defines=FLASH_OPENMP=1
threadwB:threadWithinBlock=True:threadBlockList=0:-defines=FLASH_OPENMP=1
threadRT:threadRayTrace=True:-defines=FLASH_OPENMP=1
threadPT:threadProtonTrace=True:-defines=FLASH_OPENMP=1


# Shortcut +pipeline                  -> enables use of pipeline(s) 
#
pipeline:-unit=multiprocessorTools/Pipeline

#PIC stuff
pic:+ug:-unit=Grid/GridParticles/GridParticlesMove:-without-unit=Grid/GridParticles/GridParticlesMove/UG:-without-unit=Grid/GridParticles/GridParticlesMove/UG/Directional

#Memory debugging.  Only one option can be used at a time.
mcheck:use_mcheck=True:--defines=MCHECK:--with-unit=source/monitors/Debugger/DebuggerMain/mcheck
dmalloc:use_dmalloc=True:--defines=DMALLOC:--with-unit=source/monitors/Debugger/DebuggerMain/dmalloc
ddt:use_ddt=True:--defines=DDT:--with-unit=source/monitors/Debugger/DebuggerMain/dmalloc

#Related to flux correction for Hydro
nolwf:NoLevelwideFluxes=True:useAmrexFlashFluxreg=True

# Support for Spark solver(s)
spark:--with-unit=physics/Hydro/HydroMain/Spark:+nolwf
sparkbase1d:--with-unit=physics/Hydro/HydroMain/Spark:+nolwf:-1d:
sparkbase2d:--with-unit=physics/Hydro/HydroMain/Spark:+nolwf:-2d:+sqr16
sparkbase3d:--with-unit=physics/Hydro/HydroMain/Spark:+nolwf:-3d:+cube16
# for future
spark3:--with-unit=physics/Hydro/HydroMain/Spark/rk3:Spark=True:+nolwf
sparklwf:--with-unit=physics/Hydro/HydroMain/Spark:NoLevelwideFluxes=False

# Shortcut to use XNet
xnet:--with-unit=physics/sourceTerms/Burn/BurnMain/nuclearBurn/XNet:xnet=True
xnet_alpha:+xnet:xnetData=Data_alpha
xnet_160:+xnet:xnetData=Data_SN160

#Shortcut to use Aprox13
a13:--with-unit=physics/sourceTerms/Burn/BurnMain/nuclearBurn/Aprox13

a19:--with-unit=physics/sourceTerms/Burn/BurnMain/nuclearBurn/Aprox19

#Shortcuts for thornado and weaklib
thornado:--with-unit=physics/RadTrans/RadTransMain/TwoMoment/Thornado
thornadoGPU:+thornado:-defines=THORNADO_GPU

thornadoAMD:+thornadoGPU:thornadoGPU=AMD:-defines=THORNADO_HIP,THORNADO_LA_ROCM
thornadoNVIDIA:+thornadoGPU:thornadoGPU=NVIDIA:-defines=THORNADO_CUDA,THORNADO_LA_CUBLAS
thornadoINTEL:+thornadoGPU:thornadoGPU=INTEL:-defines=THORNADO_LA_ONEMKL

thornadoOMP:+thornado:thornadoOMP=True:-defines=THORNADO_OMP
thornadoACC:+thornadoGPU:thornadoACC=True:-defines=THORNADO_OACC
thornadoOMP_OL:+thornadoGPU:thornadoOMP_OL=True:-defines=THORNADO_OMP_OL


weaklib:useWeaklib=True:--with-unit=physics/Eos/EosMain/WeakLib:-defines=MICROPHYSICS_WEAKLIB
weaklibOMP:+weaklib:weaklibOMP=True:-defines=WEAKLIB_OMP
weaklibACC:+weaklib:weaklibACC=True:-defines=WEAKLIB_OACC
weaklibOMP_OL:+weaklib:weaklibOMP_OL=True:-defines=WEAKLIB_OMP_OL

# Shortcut to use starkiller eos
starkiller:--with-unit=physics/Eos/EosMain/Helmholtz/SpeciesBased/starkiller

# MoL Shortcut
MoL:--with-unit=numericalTools/MoL:--with-unofficial=numericalTools/MoL:useMoL=True
MoLERK:+MoL:MoL_Integrator="ERK"
MoLIMEX:+MoL:MoL_Integrator="IMEX"
MoLMR:+MoL:MoL_Integrator="MR"

# Incomp shortcut
incomp:Incomp=True:IOWriteGridFiles=True:InsPresLaplacian=False:InsForceInOut=True:InsLSDamping=False:InsExtras=True

# Profiler shortcuts
hpctoolkit:Profiler=Hpctoolkit:--with-unit=monitors/Profiler/ProfilerMain/hpctoolkit
