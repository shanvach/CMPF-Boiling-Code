"""Module to generate parfile from toml file. Called from bin/setup.py"""

import os
from globals import SetupError, UNIT_KEYWORDS


def main(GVars):
    """
    This is the public call to programatically generate parfiles using from a toml
    inputs dictionary.
    """
    # Get the dictionary from Flash-X setup_params file to enforce TOML file design
    paramsDict = __getParamsDict(GVars)
    # Call internal method to create parfile and call external modules
    __createParfile(GVars, paramsDict)


def __getParamsDict(GVars):
    """
    Build a dictionary to map runtime parameters to keywords for units and verify that
    input dictionary follows the required rules. This is done to enforce constraints on
    TOML file design. Setting up experiments that exactly map parameters to unit keywords
    contribute towards overall understanding of the computational experiment
    """
    target_dir = os.path.join(GVars.flashHomeDir, GVars.objectDir)
    setup_params = os.path.join(target_dir, "setup_params")

    if not os.path.exists(setup_params):
        raise SetupError("Cannot find Flash-X setup_params file in " + f"{target_dir}")

    # Start with opening the parameter file generated by the setup
    # script and reading lines as a list of strings
    with open(setup_params, "r") as params_file:
        params = params_file.readlines()

    # Set default range for indices and counter
    index_range = [[0, 0] for _ in range(100)]
    index_counter = -1

    # Loop over the list of lines and start applying logic to find indices
    # of lines that store runtime parameters for individual units
    for index, line in enumerate(params):
        # Skip the first index
        if index == 0:
            continue

        # Logic for populating ranges for runtime parameters, based on
        # their relative location to a new line character
        if line[0] != " ":
            if line[0] != "\n" and params[index - 1][0] == "\n":
                index_counter = index_counter + 1
                index_range[index_counter][0] = index

            if line[0] == "\n" and params[index - 1][0] != "\n":
                index_range[index_counter][1] = index - 1

        if index == len(params) - 1:
            index_range[index_counter][1] = index

    # Now create an empty dictionary for parameters. This dictionary will be compared to
    # input dictionary to enforce design rules.
    paramsDict = {}

    # Loop over number of units identified above. We will deal with each unit separately
    for unit_index in range(index_counter + 1):
        # Empty group key to associate the unit with (this will be populated below), and
        # relative path to parsed from the list of lines in params file
        group_key = []
        unit_path = params[index_range[unit_index][0]].strip("\n")

        # Loop over individual group in specified keywords and then perform checks to see
        # if the group name is present in the relative path to the unit
        for group in UNIT_KEYWORDS:
            if group in unit_path:
                group_key = group

        # If by this point group_key does not have any value, then we have encountered
        # a an unregistered Flash-X unit which will require updates
        if not group_key:
            raise SetupError(
                f"Cannot find a matching keyword for {unit_path}. "
                + "This unit should be registered as keyword in bin/tomlParser.py"
            )

        # If we are here then we have associated the unit with a registered group. Now
        # parse between the index ranges to populate paramsDict
        for index in range(
            index_range[unit_index][0] + 1, index_range[unit_index][1] + 1
        ):
            if len(params[index]) > 4:
                if params[index][:4] == " " * 4 and params[index][4] != " ":
                    if group_key in paramsDict:
                        paramsDict[group_key].append(params[index].split()[0])
                    else:
                        paramsDict[group_key] = [params[index].split()[0]]

    return paramsDict


def __createParfile(GVars, paramsDict):
    """
    Create a runtime parameter file for Flash-X by parsing
    the dictionary contained in job.input. This functionality
    will only be available when the "instrument" flag is present
    in Jobfile.
    """
    if GVars.parfile:
        writeMode = "a"
    else:
        writeMode = "w"

    # Open flash.par in write mode in JobWorkDir, reserved environment
    # variable for working node along the directory tree.
    with open(
        os.path.join(GVars.flashHomeDir, GVars.objectDir, "flash.par"), writeMode
    ) as parfile:
        # Add a comment to the parfile to indicate that this was generated
        # using a tool. Add warning to note that this can be replaced and should
        # be copied to a new location or renamed before making changes.
        parfile.write(
            "# The content below is programmatically generated from tomlfile. Copy before editing.\n"
        )

        # Loop over keys in the input dictionary to and start building the parfile
        for group in GVars.tomlDict:
            if group not in UNIT_KEYWORDS:
                raise SetupError(
                    f'Group "{group}" does not belong to Flash-X UNIT_KEYWORDS in bin/tomlParser.py'
                )

            # Create a group section for runtime parameters that will follow
            parfile.write(f"\n# Runtime parameters for {group}\n")

            # Loop over values in the corresponding keys and start populating
            for key, value in GVars.tomlDict[group].items():
                # Check if value is a dictionary or not. Dictionaries represent
                # more complex configuration which will not be handled.
                if type(value) == dict:
                    continue

                # Check consistency between input and parameter dictionary and handle exceptions
                refGroup = None
                for paramGroup in paramsDict:
                    for paramKey in paramsDict[paramGroup]:
                        if key == paramKey:
                            refGroup = paramGroup

                if not refGroup:
                    raise SetupError(
                        f'Cannot match "{group}.{key}" to setup_params in bin/tomlParser.py'
                    )

                elif group != refGroup:
                    raise SetupError(
                        f'Parameter "{key}" associated with "{group}" belongs '
                        + f'to "{refGroup}". Please fix your tomlfile.'
                    )

                else:
                    # Deal with True/False values
                    if isinstance(value, bool):
                        parfile.write(f"{key} = .{str(value).upper()}.\n")

                    # Deal with strings
                    elif type(value) == str:
                        parfile.write(f'{key} = "{value}"\n')

                    # Deal with rest
                    else:
                        parfile.write(f"{key} = {value}\n")
