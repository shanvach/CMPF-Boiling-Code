!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup physics_Eos
!!
!! @brief main implementation for computing eos on a vector of data points
!!
!! @subref{Eos_vector}
!!
!!
!!NOVARIANTS


#include "constants.h"
#include "Eos.h"
#include "Simulation.h"

subroutine Eos_vector(mode, vecLen, eosData, massFrac1, derivs)

!==============================================================================
  use Driver_interface, ONLY : Driver_abort
  use Eos_data, ONLY : eos_meshMe, eos_type
  use eos_localInterface, ONLY : eos_helmSpecies, eos_idealGamma, eos_weakLib


  implicit none
  integer, INTENT(in) :: mode, vecLen
  real, dimension(vecLen,EOS_VARS) :: eosData 
  real, optional, INTENT(in),target, dimension(NSPECIES,vecLen)    :: massFrac1
  real, optional, INTENT(out), dimension(1:vecLen,EOS_VARS+1:EOS_NUM) :: derivs

  real,pointer,dimension(:) :: massFrac
  integer :: i
  real :: @M eos_args, ekin
  @M eos_map_declare

  logical :: pMassFrac_and_derivs, pMassFrac, pDerivs

  if (mode==MODE_EOS_NOP) return ! * Return immediately for MODE_EOS_NOP! *

  pMassFrac = present(massFrac1)
  pDerivs = present(derivs)
  pMassFrac_and_derivs = pMassFrac.and.pDerivs



#ifndef EOS_WEAKLIB_INCLUDED
  if(pMassFrac_and_derivs) then
     do i = 1,vecLen
        massFrac(1:NSPECIES) => massFrac1(1:NSPECIES,i)
        @M eos_unpack(eosData,i)
        @M eos_idealGamma_massFrac_derivs
        @M eos_helmSpecies_massFrac_derivs
        @M eos_pack(eosData,i)
     end do
  else if (pMassFrac) then
     do i = 1,vecLen
        massFrac(1:NSPECIES) => massFrac1(1:NSPECIES,i)
        @M eos_unpack(eosData,i)
        @M eos_idealGamma_massFrac
        @M eos_helmSpecies_massFrac
        @M eos_pack(eosData,i)
     end do
  else if (pDerivs) then
     do i = 1,vecLen
        @M eos_unpack(eosData,i)
        @M eos_idealGamma_derivs
        @M eos_helmSpecies_derivs
        @M eos_pack(eosData,i)
     end do
  else
     do i = 1,vecLen
        @M eos_unpack(eosData,i)
        @M eos_idealGamma
        @M eos_helmSpecies
        @M eos_pack(eosData,i)
     end do
  end if
#endif
#ifdef EOS_WEAKLIB_INCLUDED
  if(pMassFrac_and_derivs) then
     @M eos_weakLib_massFrac_derivs(massFrac1)
  else if (pMassFrac) then
     @M eos_weakLib_massFrac(massFrac1)
  else if (pDerivs) then
     @M eos_weakLib_derivs        
  else
     @M eos_weakLib        
  end if
#endif   

  return
end subroutine Eos_Vector


