[eos_hybridInit]
definition =
  call eos_hybridInit()



[eos_energyShift]
definition =
   eosData_ptr(1:vecLen, 1:EOS_NUM) => eosData
   energyShift = eos_hybDeltaE_WL*conv
   ! Redundant yes, but Id rather not have the conditional check
   ! in the loop over the vector
   if (present(massFrac) .and. (NSPECIES .gt. 0)) then
      ! Note: massFrac is indexed oppositely of eosData
      massFrac_ptr(1:NSPECIES, 1:vecLen) => massFrac
      n=1
      @M loop_3d(range)
         energyShift(n) = energyShift(n) - delta*solutionData(ye_map,i,j,k) &
                          - sum(massFrac_ptr(:, n)*eos_hybBoverA)*conv
      @M loop_end_3d 
   else
     @M loop_3d(range)
         energyShift(n) = energyShift(n) - delta*solutionData(ye_map,i,j,k)
     @M loop_end_3d
   end if

[eos_postprocess]
definition =
           solnData(pres_map,i,j,k) = pres
           solnData(temp_map,i,j,k) = temp
           solnData(gamc_map,i,j,k) = gamc
           if(eint_map /= NONEXISTENT)solnData(eint_map,i,j,k) = eint
           if(ener_map /= NONEXISTENT)solnData(ener_map,i,j,k) = eint + ekin
           if(entr_map /= NONEXISTENT)solnData(entr_map,i,j,k) = entr
           solnData(game_map,i,j,k) = pres /(eint * dens ) +1
 #if defined(TMPH_VAR) && defined(TMPW_VAR)
             ! Hack for extracting Helmholtz and WeakLib inverted temperatures
             ! in the transition region
             solnData(TMPH_VAR,i,j,k) = gamc
             solnData(TMPW_VAR,i,j,k) = entr
 #endif

