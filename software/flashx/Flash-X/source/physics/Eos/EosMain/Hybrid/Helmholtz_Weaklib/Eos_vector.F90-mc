!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file
!> @ingroup physics_Eos
!!
!! @brief Implementation to permit two Eos, Helmholtz and Weaklib to be used
!!        in the same application instance
!! 
!! @subref{Eos_vector}
!!
!!
!!NOVARIANTS
subroutine Eos_vector(mode, vecLen, eosData, massFrac,derivs)
   use eos_localInterface, only: eos_helmSpecies, eos_weaklib

   use eos_hybridInterface, only: eos_hybridSetFlag, eos_hybridEnergyShift
   use eos_hybridData, only: eos_hybTransitionDensLo, eos_hybTransitionDensHi, &
                             ergPerKg_to_kbPerBaryon, kbPerBaryon_to_ergPerKg
   use Eos_data, ONLY : eos_doYe
   implicit none

#include "constants.h"
#include "Eos.h"
#include "Simulation.h"

   integer, intent(in) :: mode, vecLen
   real, intent(inout), dimension(vecLen,EOS_VARS) :: eosData
   real, optional, intent(in), dimension(NSPECIES,vecLen), target :: massFrac
   real, optional, intent(out),dimension(vecLen,EOS_VARS+1:EOS_NUM) :: derivs
   integer :: vecBegin, vecEnd
   logical :: pMassFrac_and_derivs, pMassFrac, pDerivs
   integer :: eos_hybFlag(vecLen)

   integer :: k_WL, vecLen_WL, kVec_WL(vecLen)
   integer :: k_HLM, vecLen_HLM, kVec_HLM(vecLen)
   real, allocatable,dimension(:,:) :: eosData_WL, massFrac_WL,eosData_HLM, massFrac_HLM
   real, allocatable ::  energyShift(:)
   real, dimension(EOS_VARS) :: eosData_k
   real :: @M eos_args,ekin

   real :: dens_in, fac, facLo, facHi, iFac

   integer :: i, k
   logical, dimension(vecLen) :: useWL, useHLM, useWLOnly, useHLMOnly, useHybOnly
   integer :: nWL, nHLM, nHyb

   vecBegin = 1
   vecEnd = vecLen

   if (mode == MODE_EOS_NOP) return ! * Return immediately for MODE_EOS_NOP! *
   if (mode == MODE_EOS_WRAPPERONLY) return ! * Return immediately for MODE_EOS_WRAPPERONLY! *

   pMassFrac = present(massFrac)
   pDerivs = present(derivs)
   pMassFrac_and_derivs = pMassFrac .and. pDerivs
   eos_doYe = .true.
   ! Note: massFrac is indexed opposite of eosData

   call eos_hybridSetFlag(mode, vecLen, eosData, vecBegin, vecEnd, eos_hybFlag)

   useWLOnly = eos_hybFlag .eq. EOS_WL
   useHLMOnly = eos_hybFlag .eq. EOS_HLM
   useHybOnly = eos_hybFlag .eq. EOS_HYB
   useWL = useWLOnly .or. useHybOnly
   useHLM = useHLMOnly .or. useHybOnly

   ! pack eosData into separate eosData vectors for each EoS
   nWL = count(useWLOnly(vecBegin:vecEnd))
   nHLM = count(useHLMOnly(vecBegin:vecEnd))
   nHyb = count(useHybOnly(vecBegin:vecEnd))
   vecLen_WL = nWL + nHyb
   vecLen_HLM = nHLM + nHyb

   allocate (eosData_WL(vecLen_WL,EOS_VARS))
   allocate (eosData_HLM(vecLen_HLM,EOS_VARS))
   allocate (energyShift(vecLen_HLM))


   if (pMassFrac) then
      allocate (massFrac_WL(NSPECIES,vecLen_WL))
      allocate (massFrac_HLM(NSPECIES,vecLen_HLM))
   end if

   eosData_WL = 0.0
   eosData_HLM = 0.0

   ! kVec_WL/HLM map an index in overall eosData vector to the WL/HLM specific vectors
   kVec_WL = 0
   kVec_HLM = 0
   kVec_WL(vecBegin:vecEnd) = unpack([(k, k=1, vecLen_WL)], useWL(vecBegin:vecEnd), 0)
   kVec_HLM(vecBegin:vecEnd) = unpack([(k, k=1, vecLen_HLM)], useHLM(vecBegin:vecEnd), 0)

   ! Pack WL/HLM vectors
   do k = vecBegin, vecEnd
      if (useWL(k)) then
         k_WL = kVec_WL(k)
         eosData_WL(k_WL, :) = eosData(k, :)
      end if

      if (useHLM(k)) then
         k_HLM = kVec_HLM(k)
         eosData_HLM(k_HLM, :) = eosData(k, :)
      end if
   end do ! k

   ! Pack mass fractions
   if (pMassFrac) then
      ! Note: these are indexed opposite of eosData
      do k = vecBegin, vecEnd
         if (useWL(k)) then
            k_WL = kVec_WL(k)
            massFrac_WL(:, k_WL) = massFrac(:, k)
         end if

         if (useHLM(k)) then
            k_HLM = kVec_HLM(k)
            massFrac_HLM(:, k_HLM) = massFrac(:, k)
         end if
      end do ! k
   end if

   ! Calculate the shift from internal to thermal energy for Helmholtz
   if (pMassFrac) then
      call eos_hybridEnergyShift(energyShift, vecLen_HLM, eosData_HLM, massFrac=massFrac_HLM)
   else
      call eos_hybridEnergyShift(energyShift, vecLen_HLM, eosData_HLM)
   end if

   if (mode .eq. MODE_DENS_EI) &
      eosData_HLM(:, EOS_EINT) = eosData_HLM(:, EOS_EINT) - energyShift

   ! Convert entropy for Helmholtz
   if (mode .eq. MODE_DENS_ENTR) &
      eosData_HLM(:, EOS_ENTR) = eosData_HLM(:, EOS_ENTR)*kbPerBaryon_to_ergPerKg

   ! Call each EoS with its own vector
   ! WL fails with zero-sized vectors (HLM does not), so explicitly checking this first
   if (pMassFrac_and_derivs) then
      if (vecLen_WL .gt. 0) &
           call eos_weaklib(mode, vecLen_WL, eosData_WL, massFrac_WL, derivs)
      do i = 1,vecLen_HLM
         @M eos_unpack(eosData_HLM,i)
         call eos_helmSpecies(mode, @M eos_args, massFrac_HLM, derivs)
         @M eos_pack(eosData_HLM,i)
      end do
   else if (pMassFrac) then
      if (vecLen_WL .gt. 0) &
         call eos_weaklib(mode, vecLen_WL, eosData_WL, massFrac_WL)

      do i = 1,vecLen_HLM
         @M eos_unpack(eosData_HLM,i)
         call eos_helmSpecies(mode, @M eos_args, massFrac_HLM)
         @M eos_pack(eosData_HLM,i)
      end do
   else if (pDerivs) then
      if (vecLen_WL .gt. 0) &
         call eos_weaklib(mode, vecLen_WL, eosData_WL, derivs=derivs)

      do i = 1,vecLen_HLM
         @M eos_unpack(eosData_HLM,i)
         call eos_helmSpecies(mode, @M eos_args, derivs=derivs)
         @M eos_pack(eosData_HLM,i)
      end do

   else
      if (vecLen_WL .gt. 0) &
         call eos_weaklib(mode, vecLen_WL, eosData_WL)

      do i = 1,vecLen_HLM
         @M eos_unpack(eosData_HLM,i)
         call eos_helmSpecies(mode, @M eos_args)
         @M eos_pack(eosData_HLM,i)
      end do
   end if

   ! Need this every time since Helmholtz can change the input energy
   eosData_HLM(:, EOS_EINT) = eosData_HLM(:, EOS_EINT) + energyShift

   ! Back to nuclear EOS units
   eosData_HLM(:, EOS_ENTR) = eosData_HLM(:, EOS_ENTR)*ergPerKg_to_kbPerBaryon

   ! Unpack and blend both EoS calls into single eosData
   do k = vecBegin, vecEnd

      eosData_k = eosData(k, :)

      if (useWLOnly(k)) then

         k_WL = kVec_WL(k)
         eosData_k = eosData_WL(k_WL, :)

      else if (useHybOnly(k)) then

         k_WL = kVec_WL(k)
         k_HLM = kVec_HLM(k)

         ! Interpolate between limits: HLM (low) and WL (high)
         dens_in = eosData(k, EOS_DENS)

         facHi = (dens_in - eos_hybTransitionDensLo) &
                 /(eos_hybTransitionDensHi - eos_hybTransitionDensLo)
         facLo = 1.0 - facHi

         eosData_k = (facHi*eosData_WL(k_WL, :) &
                      + facLo*eosData_HLM(k_HLM, :))

      else ! useHLMOnly(k)

         k_HLM = kVec_HLM(k)
         eosData_k = eosData_HLM(k_HLM, :)

      end if

      ! Note: the following are ugly hacks for the sole purpose of storing the
      ! inverted temperatures from each EOS for comparison in the unit test
#ifdef TMPH_VAR
      ! This assumes that EOS_GAMC is mapped to TMPH_VAR,
      ! perhaps by a specialized macro eos_postprocess.
      if (useHLM(k)) then
         eosData_k(EOS_GAMC) = eosData_HLM(k_HLM, EOS_TEMP)
      else
         eosData_k(EOS_GAMC) = eosData_k(EOS_TEMP)
      end if
#endif

#ifdef TMPW_VAR
      ! This assumes that EOS_ENTR is mapped to TMPW_VAR,
      ! perhaps by a specialized macro eos_postprocess.
      if (useWL(k)) then
         eosData_k(EOS_ENTR) = eosData_WL(k_WL, EOS_TEMP)
      else
         eosData_k(EOS_ENTR) = eosData_k(EOS_TEMP)
      end if
#endif

      eosData(k, :) = eosData_k

   end do

   if (allocated(eosData_WL)) deallocate (eosData_WL)
   if (allocated(eosData_HLM)) deallocate (eosData_HLM)
   if (allocated(massFrac_WL)) deallocate (massFrac_WL)
   if (allocated(massFrac_HLM)) deallocate (massFrac_HLM)
   if (allocated(energyShift)) deallocate (energyShift)
 end subroutine Eos_Vector
