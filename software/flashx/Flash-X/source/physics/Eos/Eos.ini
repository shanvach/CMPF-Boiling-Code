

[eos_idealGammaInit]
definition = 


[eos_helmSpeciesInit]
definition = 

[eos_weaklibInit]
definition = 

[eos_hybridInit]
definition = 


[eos_idealGamma]
definition = 

[eos_idealGamma_derivs]
definition =

[eos_idealGamma_massFrac]
definition =


[eos_idealGamma_massFrac_derivs]
definition =


[eos_helmSpecies]
definition = 

[eos_helmSpecies_derivs]
definition =

[eos_helmSpecies_massFrac]
definition =


[eos_helmSpecies_massFrac_derivs]
definition =


[eos_weakLib]
definition = 

[eos_weakLib_derivs]
definition =

[eos_weakLib_massFrac]
definition =


[eos_weakLib_massFrac_derivs]
definition =

[eos_weakLib_point]
definition = 

[eos_weakLib_point_derivs]
definition =

[eos_weakLib_point_massFrac]
definition =


[eos_weakLib_point_massFrac_derivs]
definition =


[eos_args_massFrac]
definition =
  @M eos_args, massFrac=massFrac

[eos_args_derivs]
definition =
   @M eos_args, derivs=derivs


[eos_args_massFrac_derivs]
definition =
   @M eos_args, massFrac, derivs


[eos_args]
definition =
  pres, temp, dens, gamc, eint, entr, abar, zbar, ye

[eos_args_init]
definition =
  entr=0; abar=0; zbar=0; ye=0
  

[eos_unpack]
args=eosData,i1
definition =
   pres = eosData(i1,EOS_PRES)
   temp = eosData(i1,EOS_TEMP)
   dens = eosData(i1,EOS_DENS)
   gamc = eosData(i1,EOS_GAMC)
   eint = eosData(i1,EOS_EINT)
   entr = eosData(i1,EOS_ENTR)
   abar = eosData(i1,EOS_ABAR)
   zbar = eosData(i1,EOS_ZBAR)
   ye   = eosData(i1,EOS_YE)
   ekin = eosData(i1,EOS_EKIN)

[eos_map_declare]
definition = 
  integer :: pres_map,dens_map,gamc_map,game_map,temp_map,entr_map
  integer :: eint_map,ener_map, velx_map, vely_map, velz_map, sumy_map, ye_map
  real :: kineticEnergy, internalEnergy


[eos_pack]
args=eosData,i1
definition =
   eosData(i1,EOS_PRES) = pres 
   eosData(i1,EOS_TEMP) = temp  
   eosData(i1,EOS_DENS) = dens  
   eosData(i1,EOS_GAMC) = gamc  
   eosData(i1,EOS_EINT) = eint  
   eosData(i1,EOS_ENTR) = entr  
   eosData(i1,EOS_ABAR) = abar  
   eosData(i1,EOS_ZBAR) = zbar  
   eosData(i1,EOS_YE)   = ye
   eosData(i1,EOS_EKIN) = ekin



[eos_map]
definition =
  pres_map = PRES_VAR
  dens_map = DENS_VAR
  temp_map = TEMP_VAR
  gamc_map = GAMC_VAR
  game_map = NONEXISTENT
  eint_map = NONEXISTENT
  ener_map = NONEXISTENT
  velx_map = NONEXISTENT
  vely_map = NONEXISTENT
  velz_map = NONEXISTENT
  sumy_map = NONEXISTENT
  ye_map   = NONEXISTENT
  entr_map = NONEXISTENT
 #ifdef GAME_VAR 
  game_map = GAME_VAR
 #endif
 #ifdef EINT_VAR
  eint_map = EINT_VAR
 #endif
 #ifdef ENER_VAR
  ener_map = ENER_VAR
 #endif
 #ifdef VELX_VAR
  velx_map = VELX_VAR
 #endif
 #ifdef VELY_VAR
  vely_map = VELY_VAR
 #endif
 #ifdef VELZ_VAR
  velz_map = VELZ_VAR
 #endif
 #ifdef SUMY_MSCALAR
  sumy_map = SUMY_MSCALAR
 #endif
 #ifdef ENTR_VAR
  entr_map = ENTR_VAR
 #endif
 #ifdef YE_MSCALAR
   ye_map = YE_MSCALAR
 #endif

   
[eos_preprocess]
definition =
  if (velx_map > 0 .AND. vely_map > 0 .AND. velz_map > 0) then
              kineticEnergy  = 0.5*(solnData(velx_map,i,j,k)**2 + &
                                    solnData(vely_map,i,j,k)**2 + &
                                    solnData(velz_map,i,j,k)**2)
           else
              kineticEnergy = 0.0
           end if
           ekin = kineticEnergy
           !! kineticEnergy holds velocity vector information -- 1/2 * Vmag**2
           !! internalEnergy holds eint (directly)  or energyTotal - ekinetic (calculated),
           !!          depending upon eintSwitch
           if(eint_map /= NONEXISTENT) then
              internalEnergy  = solnData(eint_map,i,j,k)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(game_map /= NONEXISTENT) then ! This case should be usable for R(elativistic)HD - KW
              internalEnergy  = solnData(pres_map,i,j,k) / solnData(dens_map,i,j,k) / &
                                   (solnData(game_map,i,j,k) - 1.0)
              if(ener_map /= NONEXISTENT) then
                 if ( solnData(ener_map,i,j,k) - kineticEnergy > max(eos_smalle, eos_eintSwitch*kineticEnergy)) then
                    internalEnergy = solnData(ener_map,i,j,k) - kineticEnergy
                 end if
              end if
           else if(ener_map /= NONEXISTENT) then
              internalEnergy = solnData(ener_map,i,j,k)-kineticEnergy
           else
              internalEnergy = eos_smalle
           endif
           
           Internalenergy = max(internalEnergy, eos_smalle)
           eint = internalEnergy
           
           pres = solnData(pres_map,i,j,k)
           dens = solnData(dens_map,i,j,k)
           temp = solnData(temp_map,i,j,k)
           gamc = solnData(gamc_map,i,j,k)
           if(entr_map /= NONEXISTENT) entr = solnData(entr_map,i,j,k)
           if((ye_map /= NONEXISTENT).and.(sumy_map /= NONEXISTENT)) then
              !! cal says abar=1/sumy
              !! cal says zbar=ye / sumy and he claims sumy are never zero
              abar =  1.0 /  solnData(sumy_map,i,j,k)
              zbar = solnData(ye_map,i,j,k) /  solnData(sumy_map,i,j,k)
           endif
	   if (ye_map /= NONEXISTENT) then
               ye = solnData(ye_map,i,j,k)
           endif


[eos_postprocess]
definition = 
           solnData(pres_map,i,j,k) = pres
           solnData(temp_map,i,j,k) = temp
           solnData(gamc_map,i,j,k) = gamc
           if(eint_map /= NONEXISTENT)solnData(eint_map,i,j,k) = eint
           if(ener_map /= NONEXISTENT)solnData(ener_map,i,j,k) = eint + ekin
           if(entr_map /= NONEXISTENT)solnData(entr_map,i,j,k) = entr
           solnData(game_map,i,j,k) = pres /(eint * dens ) +1



[eos_debug]
definition =
  ierr = 1
  select case (mode)
  case (MODE_DENS_PRES)
     ierr = 0
  case (MODE_DENS_TEMP)
     ierr = 0
  case (MODE_DENS_EI)
     ierr = 0
  case (MODE_EOS_NOP,MODE_EOS_WRAPPERONLY)
     ierr = 0
  case (MODE_DENS_TEMP_ALL,MODE_DENS_TEMP_EQUI)
     ierr = 0
  case (MODE_DENS_EI_ALL,MODE_DENS_EI_SCATTER,MODE_DENS_EI_GATHER)
     ierr = 0
  case (MODE_DENS_EI_SELE_GATHER)
     ierr = 0
  case (MODE_DENS_ENTR)
     ierr = 0
  end select
  if(ierr /= 0) then
     call Driver_abort("[Eos_multiDim] "//&
          "invalid mode: must be MODE_DENS_PRES, MODE_DENS_TEMP, MODE_DENS_EI, or variants thereof, or MODE_EOS_NOP")
  end if


