!!****cr* source/physics/RadTrans/RadTransMain/TwoMoment/Thornado/RadTrans
!! NOTICE
!!  Copyright 2024 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!!  NAME 
!!
!!  RadTrans
!!
!!  SYNOPSIS
!!
!!  call RadTrans( real(IN)    :: dt, 
!!       optional, integer(IN) :: pass)
!!
!!  DESCRIPTION 
!!      This subroutine performs the radiatiative transfer calculation
!!      for this step. 
!!
!! ARGUMENTS
!!
!!   dt     : The time step
!!   pass   : Reverses direction of solve
!!
!! HISTORY
!!
!!   2020     Initial RadTrans                       - Ran Chu
!!   2021     Added THORNADO_SWE                     - Ran Chu
!!   2023     Replaced Eos_everywhere w/ Eos_wrapped - Steven Fromm
!!   2024     Replaced Eos_wrapped w/ Eos_multiDim   - Anshu Dubey
!!
!!***

!!REORDER(4): Uin, Sout

subroutine RadTrans( dt, pass )

#include "Simulation.h"
#include "constants.h"

#ifdef NSPECIES > 0
  use Burn_interface, ONLY : Burn_makeAbundanceYeConsistent
#endif
  use Driver_interface, ONLY : Driver_abort
  use Eos_interface, ONLY : Eos_multiDim!Eos_everywhere
  use FluidFieldsModule, ONLY : uCF
  use GeometryFieldsModuleE, ONLY : uGE
  use GeometryFieldsModule, ONLY : uGF
  use Grid_interface, ONLY : Grid_fillGuardCells, &
      Grid_getMaxRefinement, Grid_getDeltas, &
      Grid_getTileIterator, Grid_releaseTileIterator
  use Grid_data, ONLY: gr_str_geometry
  use RadiationFieldsModule, ONLY : uCR, nCR, uPR, uAR, uGR
  use RadTrans_data, ONLY : rt_useRadTrans, rt_enableTiling, &
     rt_eosModeGc, rt_gcMask, rt_str_geometry, rt_geometry
  use rt_data, ONLY : rt_doExplicit, rt_doImplicit, rt_ivar, &
     rt_offGridFluxR
  use rt_tm_interface, ONLY : rt_tm_reconstruction, rt_tm_projection
  use ThornadoInitializationModule, ONLY : &
        InitThornado_Patch, FreeThornado_Patch
  use Timers_interface, ONLY : Timers_start, Timers_stop
  use TimeSteppingModule_Flash, ONLY : Update_IMEX_PDARS
#if defined(THORNADO_ORDER_V)
  use TwoMoment_UtilitiesModule, ONLY: ComputeFromConserved_TwoMoment
#endif
  use UnitsModule, ONLY : Centimeter, Second

  use Grid_iterator, ONLY : Grid_iterator_t
  use Grid_tile, ONLY : Grid_tile_t

  use ProgramHeaderModule, ONLY : iZ_B0, iZ_B1, iZ_E0, iZ_E1, &
     iX_B0, iX_B1, iX_E0, iX_E1, nDOFZ
  use TimeSteppingModule_Flash, ONLY : &
     ApplyBoundaryConditions_Radiation, &
     ApplyBoundaryConditions_Fluid, &
     iApplyBC_Both, &
     iApplyBC_Inner, &
     iApplyBC_Outer, &
     iApplyBC_None

  implicit none

  real,    intent(in)           :: dt
  integer, intent(in), optional :: pass

  logical, save :: fakeTimer1 = .TRUE.

  real, pointer, dimension(:,:,:,:) :: Uin, Sout
  real, dimension(LOW:HIGH,MDIM) :: boundBox
  integer, dimension(MDIM) :: lo, hi, loGC, hiGC, u_lo, u_hi

  type(Grid_iterator_t) :: itor
  type(Grid_tile_t) :: tileDesc

  integer, parameter :: my_ngrow = 2
  integer :: nX(3), swX(3), iZ_SW_P(4)
  integer :: bcX(3), iApplyBC(3)
  real :: xL(3), xR(3)
  real :: local_offGridFluxR(2*THORNADO_NMOMENTS)

  integer :: faces(LOW:HIGH, 1:MDIM)
  integer :: ivar, i

  real, parameter :: conv_x = Centimeter

  !real, allocatable, dimension(:,:,:,:,:,:,:) :: T0_R, T1_R

  nullify( Uin )
  nullify( Sout )

#ifdef USE_MOL
  return
#endif

  if( .NOT. rt_useRadTrans ) return

  if ( my_ngrow /= 2 ) then
     call Driver_abort("Need two ghost cells in call_to_thornado!")
  else if ( my_ngrow*THORNADO_NNODESX > NGUARD ) then
     call Driver_abort("NGUARD must be at least my_ngrow*THORNADO_NNODESX")
  end if

  call Timers_start( "RadTrans" )

  call Timers_start( "rt_gc" )

  call Grid_fillGuardCells &
         ( CENTER, ALLDIR, minLayers=my_ngrow*THORNADO_NNODESX, &
           doEos=.true., eosMode=rt_eosModeGc, maskSize=NUNK_VARS, &
           mask=rt_gcMask, makeMaskConsistent=.true. )
  
  call Timers_stop( "rt_gc" )

  local_offGridFluxR = 0.0

  call Grid_getTileIterator( itor, LEAF, tiling=rt_enableTiling )
  
  if (.not. itor%isValid() .AND. fakeTimer1) then
     call Timers_start( "rt_init" )
     call Timers_stop ( "rt_init" )
     call Timers_start( "rt_reconstruction" )
     call Timers_stop ( "rt_reconstruction" )
     call Timers_start( "rt_imex" )
     call Timers_stop ( "rt_imex" )
     call Timers_start( "rt_projection" )
     call Timers_stop ( "rt_projection" )
     call Timers_start( "rt_finalize" )
     call Timers_stop ( "rt_finalize" )
     fakeTimer1 = .FALSE.
  end if
  do while( itor % isValid() )
  
    call itor%currentTile(tileDesc)

    ! Get a pointer to solution data and scratch data
    
    call tileDesc % getDataPtr( Uin, CENTER )
    call tileDesc % getDataPtr( Sout, SCRATCH )
    
    call tileDesc % faceBCs( faces )

    ! get dimensions/limits and coordinates
    
    nX  = 1
    swX = 0
    bcX = 0
    iApplyBC = iApplyBC_None
    iZ_SW_P = 0
    xL  = 0.0
    if     ( rt_geometry == CARTESIAN   )then
      xR = 1.0
    else if( rt_geometry == CYLINDRICAL )then
      xR = [ 1.0, 1.0, 2.0*PI ]
    else if( rt_geometry == SPHERICAL   )then
      xR = [ 1.0, PI, 2.0*PI ]
    end if

    lo = tileDesc % limits(LOW ,1:MDIM)
    hi = tileDesc % limits(HIGH,1:MDIM)

    loGC = tileDesc % blkLimitsGC(LOW ,1:MDIM)
    hiGC = tileDesc % blkLimitsGC(HIGH,1:MDIM)
    
    nX (1:NDIM) = ( hi(1:NDIM) - lo(1:NDIM) + 1 ) / THORNADO_NNODESX
    swX(1:NDIM) = my_ngrow
    iZ_SW_P(2:NDIM+1) = swX(1:NDIM)

    ! Check if the block needs boundary condition
    do i = 1, NDIM

       if (     ( faces(LOW ,i) == OUTFLOW .or. faces(LOW ,i) == DIODE ) &
          .and. ( faces(HIGH,i) == OUTFLOW .or. faces(HIGH,i) == DIODE ) ) then

          bcX(i) = 2
          iApplyBC(i) = iApplyBC_Both

       else if (  faces(LOW ,i) == REFLECTING .and. faces(HIGH,i) == REFLECTING ) then

          bcX(i) = 3
          iApplyBC(i) = iApplyBC_Both

       else if (  faces(LOW ,i) == REFLECTING &
          .and. ( faces(HIGH,i) == OUTFLOW .or. faces(HIGH,i) == DIODE ) ) then

          bcX(i) = 32
          iApplyBC(i) = iApplyBC_Both

       else if ( faces(LOW ,i) == OUTFLOW .or. faces(LOW ,i) == DIODE ) then

          bcX(i) = 2
          iApplyBC(i) = iApplyBC_Inner

       else if ( faces(HIGH,i) == OUTFLOW .or. faces(HIGH,i) == DIODE ) then

          bcX(i) = 2
          iApplyBC(i) = iApplyBC_Outer

       else if ( faces(LOW ,i) == REFLECTING ) then

          bcX(i) = 3
          iApplyBC(i) = iApplyBC_Inner

       else if ( faces(HIGH,i) == REFLECTING ) then

          bcX(i) = 3
          iApplyBC(i) = iApplyBC_Outer

       end if
    end do
    
    u_lo = 1  - swX
    u_hi = nX + swX

    call tileDesc % boundBox( boundBox )
    xL(1:NDIM) = boundBox(LOW, 1:NDIM)
    xR(1:NDIM) = boundBox(HIGH,1:NDIM)

    ! Thornado uses units where c = G = k = 1, Meter = 1
    ! convert cm to m for Thornado
    
    xL(1) = xL(1) * conv_x
    xR(1) = xR(1) * conv_x
    if( rt_geometry == CARTESIAN .or. rt_geometry == CYLINDRICAL )then
      xL(2) = xL(2) * conv_x
      xR(2) = xR(2) * conv_x
      if( rt_geometry == CARTESIAN )then
        xL(3) = xL(3) * conv_x
        xR(3) = xR(3) * conv_x
      end if
    end if

    ! Setup thornado data structures
    
    call Timers_start( "rt_init" )

    @M dir_enter_data &
    @M dir_copyin( [Uin, Sout, lo, hi, loGC, hiGC, u_lo, u_hi, nX] ) &
    @M dir_end

    call InitThornado_Patch &
           ( nX, swX, xL, xR, THORNADO_NSPECIES, rt_str_geometry )

    call Timers_stop( "rt_init" )

    call Timers_start( "rt_reconstruction" )
    
    call rt_tm_reconstruction( Uin, nX, lo, hi, loGC, hiGC, u_lo, u_hi, tileDesc % level )
    
    call Timers_stop( "rt_reconstruction" )

    call ApplyBoundaryConditions_Radiation &
           ( iZ_B0, iZ_E0, iZ_B1, iZ_E1, uCR, iZ_SW_P, bcX, iApplyBC )

#if   defined(THORNADO_ORDER_V)
    call ApplyBoundaryConditions_Fluid &
           ( iX_B0, iX_E0, iX_B1, iX_E1, uCF, iZ_SW_P, bcX, iApplyBC )
#endif

    ! Call the Fortran interface that lives in the Thornado repo
    
    call Timers_start( "rt_imex" )
    
     !allocate( T0_R (1:nDOFZ, &
     !                iZ_B1(1):iZ_E1(1), &
     !                iZ_B1(2):iZ_E1(2), &
     !                iZ_B1(3):iZ_E1(3), &
     !                iZ_B1(4):iZ_E1(4), &
     !                1:nCR,1:THORNADO_NSPECIES) )
     !allocate( T1_R (1:nDOFZ, &
     !                iZ_B1(1):iZ_E1(1), &
     !                iZ_B1(2):iZ_E1(2), &
     !                iZ_B1(3):iZ_E1(3), &
     !                iZ_B1(4):iZ_E1(4), &
     !                1:nCR,1:THORNADO_NSPECIES) )

    call Update_IMEX_PDARS &
           ( dt * Second, uCF, uCR, &
             Explicit_Option = rt_doExplicit, &
             Implicit_Option = rt_doImplicit, &
             SingleStage_Option = .false., &
             bcX_Option = bcX, &
             iApplyBC_Option = iApplyBC, &
             OffGridFluxR_Option = local_offGridFluxR )
    !call Update_IMEX_PDARS &
    !       ( dt * Second, uCF, uCR, T0_R, T1_R, &
    !         Explicit_Option = rt_doExplicit, &
    !         Implicit_Option = rt_doImplicit, &
    !         SingleStage_Option = .false., &
    !         BoundaryCondition_Option = ApplyBC )

    !if ( sim_globalMe == MASTER_PE ) then
    !   ivar = rt_ivar(1,1,1,1)
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)  )
    !   write(*,*) Uin(ivar,lo(IAXIS)-1,lo(JAXIS)  ,lo(KAXIS)  ), &
    !              Uin(ivar,lo(IAXIS)-2,lo(JAXIS)  ,lo(KAXIS)  )
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)-1,lo(KAXIS)  ), &
    !              Uin(ivar,lo(IAXIS)  ,lo(JAXIS)-2,lo(KAXIS)  )
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)-1), &
    !              Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)-2)
    !   write(*,*) T0_R(1,1,1,1,1,1,1)
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)  ) + dt * T0_R(1,1,1,1,1,1,1)
    !   write(*,*) Uin(ivar,lo(IAXIS)-1,lo(JAXIS)  ,lo(KAXIS)  ) + dt * T0_R(3,1,0,1,1,1,1), &
    !              Uin(ivar,lo(IAXIS)-2,lo(JAXIS)  ,lo(KAXIS)  ) + dt * T0_R(1,1,0,1,1,1,1)
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)-1,lo(KAXIS)  ) + dt * T0_R(5,1,1,0,1,1,1), &
    !              Uin(ivar,lo(IAXIS)  ,lo(JAXIS)-2,lo(KAXIS)  ) + dt * T0_R(1,1,1,0,1,1,1)
    !   write(*,*) Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)-1) + dt * T0_R(9,1,1,1,0,1,1), &
    !              Uin(ivar,lo(IAXIS)  ,lo(JAXIS)  ,lo(KAXIS)-2) + dt * T0_R(1,1,1,1,0,1,1)
    !   write(*,*) T1_R(1,1,1,1,1,1,1)
    !end if
    !deallocate( T0_R, T1_R )

    ! Calculate energy-integrated (gray) quantities
#if defined(THORNADO_ORDER_V)
    call ComputeFromConserved_TwoMoment &
           ( iZ_B0, iZ_E0, iZ_B1, iZ_E1, uGF, uCF, uCR, uPR, uAR, uGR )
#endif

    rt_offGridFluxR = rt_offGridFluxR + local_offGridFluxR
    
    call Timers_stop( "rt_imex" )

    ! Copy back from the Thornado arrays into Flash arrays
    
    call Timers_start( "rt_projection" )
    
    call rt_tm_projection( Uin, Sout, nX, lo, hi, loGC, hiGC, u_lo, u_hi, tileDesc % level )
    
    call Timers_stop( "rt_projection" )

    call Timers_start( "rt_finalize" )

    @M dir_exit_data &
    @M dir_copyout( [Uin, Sout] ) &
    @M dir_delete( [lo, hi, loGC, hiGC, u_lo, u_hi, nX] ) &
    @M dir_end

    call FreeThornado_Patch()
    
    call Timers_stop( "rt_finalize" )

    call tileDesc % releaseDataPtr( Uin, CENTER )
    call tileDesc % releaseDataPtr( Sout, SCRATCH )

    fakeTimer1 = .FALSE.

    call itor % next()
    
  end do ! iterator loop
  
  call Grid_releaseTileIterator( itor )

#if NSPECIES > 0
  ! Make composition consistent with change in electron fraction from transport
  !call Burn_makeAbundanceYeConsistent
#endif

  call Timers_start( "eos" )

  call Grid_getTileIterator( itor, LEAF, tiling=rt_enableTiling )
  do while( itor % isValid() )
    call itor%currentTile(tileDesc)
    call tileDesc % getDataPtr( Uin, CENTER )
    call Eos_multiDim(MODE_DENS_EI,tileDesc%limits,Uin)
    call itor % next()
  end do
  call Grid_releaseTileIterator( itor )

  call Timers_stop( "eos" )

  call Timers_stop( "RadTrans" )

  return

end subroutine RadTrans
