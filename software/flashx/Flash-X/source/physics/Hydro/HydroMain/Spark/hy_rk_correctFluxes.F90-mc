!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Apply flux correction at fine/coarse boundaries.
!!
!! @details
!! The proper 'flux deltas'--consistent with Section 3 of Berger&Colella(1989)--
!! should be loaded into hy_fluxBuf[XYZ]. Because this algorithm applies flux
!! correction at every block interface (not just fine/coarse interfaces)
!! the fluxes NOT on fine/coarse interfaces must be zerod out.
!!
!! @param Uin             Pointer to solution data
!! @param blkLimits       Index limits for interior of the tile/block
!! @param fluxBuf[X,Y,Z]  Flux buffers in [X,Y,Z] direction
!! @param deltas          dx, dy, dz
!! @param farea[X,Y,Z]    Face areas in [X,Y,Z] direction for non-cartesian grid
!! @param cvol            Cell volumes for non-cartesian grid
!! @param xCenter         Cell center coordinates of IAXIS for non-cartesian grid
!! @param [x,y]Left       Cell's left coordinates of [I,J]AXIS for non-cartesian grid
!! @param [x,y]Right      Cell's right coordinates of [I,J]IAXIS for non-cartesian grid
!! @param geometry        Geometry switch
!! @param smalle          Energy cutoff value
!! @param smalld          Density cutoff value
!! @param dt              Timestep
!! @param isFlux          A switch to handle fluxes rather than flux densities
!! @param lo              Lower indices excluding guard cells
!! @param loGC            Lower indices including guard cells
!<

!!Reorder(4):fluxBuf[XYZ],Uin
!!NOVARIANTS

subroutine hy_rk_correctFluxes(Uin, blkLimits, &
                               fluxBufX, fluxBufY, fluxBufZ, &
                               deltas, fareaX, fareaY, fareaZ, cvol, xCenter, &
                               xLeft, xRight, yLeft, yRight, &
                               geometry, &
                               smalle, smalld, &
                               dt, isFlux, &
                               lo, loGC)

  use Hydro_data, ONLY : hy_threadWithinBlock


  use Driver_interface, ONLY : Driver_abort
  use Eos_interface, ONLY : Eos_multiDim,Eos


  implicit none

#include "Simulation.h"
#include "constants.h"
#include "Spark.h"
#include "Eos.h"

  integer, intent(IN) :: geometry, lo(3), loGC(3)
  real, pointer :: Uin(:, :, :, :)
  real, dimension(1:, lo(1):, lo(2):, lo(3):), intent(IN) :: fluxBufX, fluxBufY, fluxBufZ
  integer, dimension(LOW:HIGH, MDIM), intent(IN) :: blkLimits
  real, dimension(loGC(1):, loGC(2):, loGC(3):), intent(IN) :: fareaX, fareaY, fareaZ, cvol
  real, dimension(loGC(1):), intent(IN) :: xCenter, xLeft, xRight
  real, dimension(loGC(2):), intent(IN) :: yLeft, yRight
  real, dimension(MDIM), intent(IN)  :: deltas
  real, intent(IN) :: smalle, smalld, dt

  logical, intent(IN) :: isFlux

  integer :: i, j, k
  real, pointer :: Vstar(:)
  real :: dx, dy, dz
  real :: dFlux(NFLUXES)
  ! Geometry factors
  real :: fac, facM, facP

  ! For EOS call
  integer, dimension(LOW:HIGH,MDIM) :: idxRange

  ! LOW side

  do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
     do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
        i = blkLimits(LOW,IAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        !~ (-) sign b/c fluxes are leaving on the low side
        dFlux = -fluxBufX(:,i,j,k)
        dx = deltas(IAXIS)
        ! Geometric factors for non-Cartesian geometries
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_X
        end if
        fac = facM
        ! Update primitives (Vstar)
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) =   blkLimits(LOW,IAXIS)
  idxRange(LOW:HIGH,JAXIS) = [ blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS) ]
  idxRange(LOW:HIGH,KAXIS) = [ blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS) ]
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)

  ! HIGH side
  do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
     do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
        i = blkLimits(HIGH,IAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        ! Positive b/c fluxes are entering on the high side
        dFlux = fluxBufX(:,i+1,j,k)
        dx = deltas(IAXIS)
        ! Get geometric factors and sources
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_X
        end if
        fac = facP
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) =   blkLimits(HIGH,IAXIS)
  idxRange(LOW:HIGH,JAXIS) = [ blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS) ]
  idxRange(LOW:HIGH,KAXIS) = [ blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS) ]
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)


#if NDIM>1
  ! Correct JAXIS sides
  ! LOW side
  do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
     do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)
        j = blkLimits(LOW,JAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        dFlux = -fluxBufY(:,i,j,k)
        fac = 1.0
        dx = deltas(JAXIS)
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_Y 
        end if
        fac = facM
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) = [ blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS) ]
  idxRange(LOW:HIGH,JAXIS) =   blkLimits(LOW,JAXIS)
  idxRange(LOW:HIGH,KAXIS) = [ blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS) ]
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)


  ! HIGH side
  do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
     do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)
        j = blkLimits(HIGH,JAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        dFlux = fluxBufY(:,i,j+1,k)
        dx = deltas(JAXIS)
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_Y 
        end if
        fac = facP
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) = [ blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS) ]
  idxRange(LOW:HIGH,JAXIS) =   blkLimits(HIGH,JAXIS)
  idxRange(LOW:HIGH,KAXIS) = [ blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS) ]
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)

#if NDIM==3
  ! Correct KAXIS sides
  ! LOW side
  do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
     do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)
        k = blkLimits(LOW,KAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        dFlux = -fluxBufZ(:,i,j,k)
        fac = 1.0
        dx = deltas(KAXIS)
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_Z 
        end if
        fac = facM
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) = [ blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS) ]
  idxRange(LOW:HIGH,JAXIS) = [ blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS) ]
  idxRange(LOW:HIGH,KAXIS) =   blkLimits(LOW,KAXIS)
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)

  ! HIGH side
  do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
     do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)
        k = blkLimits(HIGH,KAXIS)
        ! Point to old/intermediate states
        Vstar => Uin(:,i,j,k)
        ! Point to the correct fluxes
        dFlux = fluxBufZ(:,i,j,k+1)
        dx = deltas(KAXIS)
        if (isFlux) then
           @M hy_geom_flux_dxdv
        else
           @M hy_geom_flux_correct_Z 
        end if
        fac = facP
        call correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
        ! Release pointers
        nullify(Vstar)
     enddo !j
  enddo !k

  ! Update EOS
  idxRange(LOW:HIGH,IAXIS) = [ blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS) ]
  idxRange(LOW:HIGH,JAXIS) = [ blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS) ]
  idxRange(LOW:HIGH,KAXIS) =   blkLimits(HIGH,KAXIS)
  call Eos_multiDim(MODE_DENS_EI,idxRange,Uin)

#endif
#endif


contains

  !!Update cell state based on flux deltas
  subroutine correctZone(Vstar,dFlux,dt,dx,fac,smalle,smalld)
    implicit none
    real, pointer, intent(INOUT) :: Vstar(:)
    real, intent(IN) :: dFlux(NFLUXES), dt, dx, fac, smalle, smalld
    real :: Ustar(NFLUXES)
    real :: eint, ekin, emag

    ! Construct vectors of conserved variables
    Ustar(HY_MASS)         = Vstar(DENS_VAR)
    Ustar(HY_XMOM:HY_ZMOM) = Vstar(DENS_VAR)*Vstar(VELX_VAR:VELZ_VAR)
    Ustar(HY_ENER)         = Vstar(DENS_VAR)*Vstar(ENER_VAR)
    Ustar(HY_NUM_FLUX+1:NFLUXES) = Vstar(SPECIES_BEGIN:MASS_SCALARS_END)*Vstar(DENS_VAR)
#ifdef SPARK_GLM
    Ustar(HY_FMGX:HY_FMGZ) = Vstar(MAGX_VAR:MAGZ_VAR)
    Ustar(HY_ENER) = Ustar(HY_ENER)+0.5*dot_product(Vstar(MAGX_VAR:MAGZ_VAR),&
         Vstar(MAGX_VAR:MAGZ_VAR))  ! * density ??? [KC]
    Ustar(HY_FPSI) = Vstar(PSIB_VAR)
#endif

    ! Now correct conserved vector with flux deltas
    ! The facP, facM definition is cracked. Need to know what side we are on
    Ustar = Ustar -dt/dx*(fac*dFlux)

    ! Update primitive variables
    emag = 0.0
#ifdef SPARK_GLM
    Vstar(MAGX_VAR:MAGZ_VAR) = Ustar(HY_FMGX:HY_FMGZ)
    ! Parabolic damping of PSI is applied to flux correction difference above
    Vstar(PSIB_VAR) = Ustar(HY_FPSI)
    emag = 0.5*dot_product(Vstar(MAGX_VAR:MAGZ_VAR),Vstar(MAGX_VAR:MAGZ_VAR))
    Vstar(MAGP_VAR) = emag
    Ustar(HY_ENER) = Ustar(HY_ENER) - emag
#endif
    Vstar(DENS_VAR)          = max(Ustar(HY_MASS),smalld)
    Vstar(VELX_VAR:VELZ_VAR) = Ustar(HY_XMOM:HY_ZMOM)/Vstar(DENS_VAR)
    Vstar(ENER_VAR)          = max(smalle,Ustar(HY_ENER)/Vstar(DENS_VAR))

    ekin = .5*dot_product(Vstar(VELX_VAR:VELZ_VAR),Vstar(VELX_VAR:VELZ_VAR))
    Vstar(EINT_VAR) = max(smalle,Vstar(ENER_VAR)-ekin)

    ! Divide partial densities by new mass densities to finalize
    ! update of new mass fractions.
    Vstar(SPECIES_BEGIN:MASS_SCALARS_END) = Ustar(HY_NUM_FLUX+1:NFLUXES)/Vstar(DENS_VAR)
  end subroutine correctZone


end subroutine hy_rk_correctFluxes
