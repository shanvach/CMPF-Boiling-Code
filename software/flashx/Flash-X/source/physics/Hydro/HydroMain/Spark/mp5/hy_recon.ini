[hy_recon_declare]
definition=
  real, dimension(5) :: stencil
  real :: delbar, del_p, del_m
  real, parameter :: one_sixtieth = 1./60.
  real, parameter :: four_thirds = 4./3.
  real, parameter :: alpha = 4.
  real :: d2m, d2, d2p, d2mp, d2mm, uul, umd, ulc, umin, umax, ump
  integer, parameter :: cntr = 3   ! five-point stencil, center idx == 3

[hy_DIR_recon_private]
definition=
  @M hy_DIR_private([delbar, del_p, del_m]) &
  @M hy_DIR_private([d2m, d2, d2p, d2mp, d2mm, uul, umd, ulc, umin, umax, ump])
[hy_DIR_recon_shared]
definition=
  @M hy_DIR_shared([mp5ZeroTol])

[hy_recon]
definition =
  s = 1
  do kk = k-2*ks, k+2*ks
  do jj = j-2*js, j+2*js
  do ii = i-2*is, i+2*is
    stencil(s) = scr_rope(v, ii, jj, kk)
    s = s + 1
  enddo
  enddo
  enddo
  ! First construct unlimited quartic polynomials to plus and minus sides of zone
  ! Suresh & Huynh (2.1)
  scr_uPlus(v,i,j,k)  = one_sixtieth*( 2.*stencil(cntr-2) - 13.*stencil(cntr-1) + &
           47.*stencil(cntr) + 27.*stencil(cntr+1) - 3.*stencil(cntr+2))
  scr_uMinus(v,i,j,k)  = one_sixtieth*(-3.*stencil(cntr-2) + 27.*stencil(cntr-1) + &
           47.*stencil(cntr) - 13.*stencil(cntr+1) + 2.*stencil(cntr+2))
  !
  ! Now compute limited slope interpolants for i+1/2
  del_p = stencil(cntr+1) - stencil(cntr)
  del_m = stencil(cntr) - stencil(cntr-1)
  ! Loop over reconstructed variables and limit as needed
  delbar = minmod(del_p, del_m)
     ! Limit i+1/2
     ! Compute monotonic value, SH 2.12
     ump = stencil(cntr) + minmod(del_p, alpha*del_m)
     if ((scr_uPlus(v,i,j,k)-stencil(cntr))*(scr_uPlus(v,i,j,k)-ump) > mp5ZeroTol) then
        @M hy_mp5_calcMonotonicD2
        uul = stencil(cntr) + alpha*del_m
        umd = 0.5*(stencil(cntr) + stencil(cntr+1)) - 0.5*d2mp
        ulc = stencil(cntr) + 0.5*del_m + four_thirds*d2mm
        umin = max(min(stencil(cntr), stencil(cntr+1), umd), min(stencil(cntr), uul, ulc))
        umax = min(max(stencil(cntr), stencil(cntr+1), umd), max(stencil(cntr), uul, ulc))
        scr_uPlus(v,i,j,k) = median(umin, scr_uPlus(v,i,j,k), umax)
        !scr_uPlus(v,i,j,k) = stencil(cntr) + 0.5*delbar
     end if
     ! Limit i-1/2
     ump = stencil(cntr) - minmod(del_m, alpha*del_p)
     if ((stencil(cntr)-scr_uMinus(v,i,j,k))*(ump-scr_uMinus(v,i,j,k)) > mp5ZeroTol) then
        @M hy_mp5_calcMonotonicD2
        uul = stencil(cntr) - alpha*del_p
        umd = 0.5*(stencil(cntr) + stencil(cntr-1)) - 0.5*d2mm
        ulc = stencil(cntr) - 0.5*del_p + four_thirds*d2mp
        umin = max(min(stencil(cntr), stencil(cntr-1), umd), min(stencil(cntr), uul, ulc))
        umax = min(max(stencil(cntr), stencil(cntr-1), umd), max(stencil(cntr), uul, ulc))
        scr_uMinus(v,i,j,k) = median(umin, scr_uMinus(v,i,j,k), umax)
        !scr_uMinus(v,i,j,k) = stencil(cntr) - 0.5*delbar
     end if


[hy_mp5_calcMonotonicD2]
definition =
  d2m = stencil(cntr-2) - 2.*stencil(cntr-1) + stencil(cntr)
  d2  = stencil(cntr-1) - 2.*stencil(cntr)   + stencil(cntr+1)
  d2p = stencil(cntr)   - 2.*stencil(cntr+1) + stencil(cntr+2)
  d2mp = minmod(minmod(4.*d2-d2p, 4.*d2p-d2), minmod(d2, d2p))
  d2mm = minmod(minmod(4.*d2m-d2, 4.*d2-d2m), minmod(d2m, d2))


