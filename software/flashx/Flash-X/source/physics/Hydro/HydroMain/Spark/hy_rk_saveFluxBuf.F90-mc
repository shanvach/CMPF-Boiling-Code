!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Save flux buffers for correcting solutions at coarse/fine boundaries
!!
!! @details
!! Cumulate fluxes in each RK sub-stage to flux buffers with proper weights.
!! The output flux buffers will be used in @ref hy_rk_correctFluxes later for
!! correcting solutions at coarse/fine boundaries.
!!
!! @param stage           Current RK stage
!! @param fluxBuf[X,Y,Z]  Input and output flux buffers in [X,Y,Z] direction
!! @param fl[x,y,z]       Input fluxes in [X,Y,Z] direction at @p stage
!! @param farea[X,Y,Z]    Face areas in [X,Y,Z] direction for non-cartesian grid
!! @param blkLimits       Index limits for interior of the tile/block
!! @param lo              Lower indices excluding guard cells
!! @param loGC            Lower indices including guard cells
!<

!!Reorder(4): fl[xyz], fluxBuf[XYZ]
!!NOVARIANTS

subroutine hy_rk_saveFluxBuf(stage, fluxBufX, fluxBufY, fluxBufZ, &
                             flx, fly, flz, &
                             fareaX, fareaY, fareaZ, &
                             blkLimits, lo, loGC)

#include "Simulation.h"
#include "constants.h"

   use Hydro_data, ONLY : hy_threadWithinBlock, &
                          weights => hy_weights, &
                          fluxCorrect => hy_fluxCorrect

   @M hy_DIR_TARGET_routine(vector)

   implicit none

   integer, intent(IN) :: stage, lo(3), loGC(3)

   real, dimension(1:, lo(1):, lo(2):, lo(3):), intent(IN OUT) :: fluxBufX, fluxBufY, fluxBufZ
   real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN) :: flx, fly, flz
   integer, dimension(LOW:HIGH, MDIM), intent(IN) :: blkLimits
   real, dimension(loGC(1):, loGC(2):, loGC(3):), intent(IN) :: fareaX, fareaY, fareaZ

   real :: wt
   integer :: i, j, k, v

   if (.not. fluxCorrect) return

   wt = 0.0
   if (stage > 1) wt = 1.0

   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufX, flx, fareaX])
   @M loop_3d_plus(blkLimits,1,0,0)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufX, fareaX, flx)
      end do
   @M loop_end_3d

#if NDIM > 1
   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufY, fly, fareaY])
   @M loop_3d_plus(blkLimits,0,1,0)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufY, fareaY, fly)
      end do
   @M loop_end_3d
#endif

#if NDIM > 2
   @M hy_DIR_parallel_loop_simd(3) &
   @M hy_DIR_TARGET_map(to, [weights]) &
   @M hy_DIR_shared([blkLimits, weights, stage, wt, fluxBufZ, flz, fareaZ])
   @M loop_3d_plus(blkLimits,0,0,1)
      do v = 1, NFLUXES
         @M hy_saveFluxBuf(fluxBufZ, fareaZ, flz)
      end do
   @M loop_end_3d
#endif


end subroutine hy_rk_saveFluxBuf
