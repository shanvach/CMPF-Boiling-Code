!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Get gravitational acceleration
!!
!! @details
!! Get gravitational acceleration for the part of block/tile @p blkLimitsGC +/- 1
!! where blkLimitsGC define full block
!!
!! @param starState       Input solution data
!! @param grav            Output gravity acceleration
!! @param radCenter       Cell center coordinates of IAXIS. Radial coord for non-cartesian case
!! @param thtCenter       Cell center coordinates of JAXIS. Angular coord for non-cartesian case
!! @param deltas          dx, dy, dz
!! @param blkLimitsGC     Index limits for exterior of the tile/block
!! @param loGC            Lower indices including guard cells
!<

!!Reorder(4):starState
!!NOVARIANTS
subroutine hy_rk_getGraveAccel(starState, grav, &
                               radCenter, thtCenter, deltas, &
                               blkLimitsGC, loGC)

  use Hydro_data, ONLY : hy_threadWithinBlock, &
                         geometry => hy_geometry
  use Driver_interface, ONLY : Driver_abort
  implicit none

  @M hy_DIR_TARGET_routine(vector)

#include "Simulation.h"
#include "constants.h"

  integer, intent(IN) :: loGC(3)
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN) :: starState
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(OUT) :: grav
  real, dimension(loGC(1):), intent(IN) :: radCenter
  real, dimension(loGC(2):), intent(IN) :: thtCenter
  real, dimension(MDIM), intent(IN)  :: deltas
  integer, dimension(LOW:HIGH,MDIM), intent(IN) :: blkLimitsGC

  real, dimension(MDIM) :: delinv, delgpot
  real :: delxinv
  integer :: i,j,k,d

  @M hy_DIR_parallel_loop(4) &
  @M hy_DIR_TARGET_map(to, [blkLimitsGC]) &
  @M hy_DIR_shared([blkLimitsGC, grav])
  do k = blkLimitsGC(LOW,KAXIS),blkLimitsGC(HIGH,KAXIS)
    do j = blkLimitsGC(LOW,JAXIS),blkLimitsGC(HIGH,JAXIS)
      do i = blkLimitsGC(LOW,IAXIS),blkLimitsGC(HIGH,IAXIS)
        do d = 1,MDIM
          grav(d,i,j,k) = 0.0
        enddo
      enddo
    enddo
  enddo

#ifdef GRAVITY
  ! For time-dependent gravity, we call the local acceleration routine
  ! since the GPOT will be extrapolated forward in time for the RK
  ! sub-stages.
#ifdef FLASH_GRAVITY_TIMEDEP
#ifdef GPOT_VAR

  @M hy_DIR_parallel_loop_simd(3) &
  @M hy_DIR_TARGET_map(to, [deltas]) &
  @M hy_DIR_shared([blkLimitsGC, grav, deltas, starState, radCenter, thtCenter, geometry]) &
  @M hy_DIR_private([delinv, delgpot])
  do k=blkLimitsGC(LOW,KAXIS)+K3D, blkLimitsGC(HIGH,KAXIS)-K3D
    do j=blkLimitsGC(LOW,JAXIS)+K2D, blkLimitsGC(HIGH,JAXIS)-K2D
      do i=blkLimitsGC(LOW,IAXIS)+K1D, blkLimitsGC(HIGH,IAXIS)-K1D

           delinv(IAXIS:NDIM) = 0.5 / deltas(IAXIS:NDIM)

           ! d/dx
           delgpot(IAXIS) = starState(GPOT_VAR,i-1,j,k) - starState(GPOT_VAR,i+1,j,k)
           grav(IAXIS,i,j,k) = delinv(IAXIS) * delgpot(IAXIS)
#if NDIM >= 2
           ! d/dy
           if (geometry == SPHERICAL) delinv(JAXIS) = delinv(JAXIS) / radCenter(i)
           delgpot(JAXIS) = starState(GPOT_VAR,i,j-1,k) - starState(GPOT_VAR,i,j+1,k)
           grav(JAXIS,i,j,k) = delinv(JAXIS) * delgpot(JAXIS)
#endif
#if NDIM == 3
           ! d/dz
           if (geometry == SPHERICAL) then
              delinv(KAXIS) = delinv(KAXIS) / ( radCenter(i) * sin(thtCenter(j)) )
           else if (geometry == CYLINDRICAL) then
              delinv(KAXIS) = delinv(KAXIS) / radCenter(i)
           end if
           delgpot(KAXIS) = starState(GPOT_VAR,i,j,k-1) - starState(GPOT_VAR,i,j,k+1)
           grav(KAXIS,i,j,k) = delinv(KAXIS) * delgpot(KAXIS)
#endif
        end do
     end do
  end do

#endif /* GPOT_VAR */
#else
  call Driver_abort("[hy_rk_getGraveAccel] Gravity that is not FLASH_GRAVITY_TIMEDEP is not currently implemented ")
#endif /* FLASH_GRAVITY_TIMEDEP */
#endif /* GRAVITY */

end subroutine hy_rk_getGraveAccel
