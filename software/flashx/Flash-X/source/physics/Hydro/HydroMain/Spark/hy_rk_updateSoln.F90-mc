!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Update solution then save it in primitive form
!!
!! @details
!! Update solution data based on conservative fluxes
!! calculated previously in @p hy_rk_getFaceFlux().
!! Then convert conservative to primitive variables.
!! Note that this only updates the part of tile/block within @p limits
!!
!! @param stage           Current RK stage
!! @param starState       Input and output solution data
!! @param tmpState        Input solution data at n-step
!! @param grav            Gravity acceleration
!! @param fl[x,y,z]       Fluxes in [X,Y,Z] direction
!! @param deltas          dx, dy, dz
!! @param farea[X,Y,Z]    Face areas in [X,Y,Z] direction for non-cartesian grid
!! @param cvol            Cell volumes for non-cartesian grid
!! @param xCenter         Cell center coordinates of IAXIS for non-cartesian grid
!! @param [x,y]Left       Cell's left coordinates of [I,J]AXIS for non-cartesian grid
!! @param [x,y]Right      Cell's right coordinates of [I,J]IAXIS for non-cartesian grid
!! @param dt              Timestep
!! @param dtOld           Old timestep
!! @param limits          Index limits for each RK stages for updating solution
!! @param lo              Lower indices excluding guard cells
!! @param loGC            Lower indices including guard cells
!<

!!Reorder(4): starState, tmpState, fl[xyz]
!!NOVARIANTS

subroutine hy_rk_updateSoln (stage, starState, tmpState, &
                             grav, flx, fly, flz, &
                             deltas, fareaX, fareaY, fareaZ, cvol, xCenter, &
                             xLeft, xRight, yLeft, yRight, &
                             dt, dtOld, limits, lo, loGC)

  use Hydro_data, ONLY : hy_threadWithinBlock, &
                         rk_coeffs => hy_coeffArray, &
                         geometry => hy_geometry, &
                         smalle => hy_smallE, &
                         smalld => hy_smalldens, &
                         alphaGLM => hy_alphaGLM, &
                         C_hyp => hy_C_hyp

  use Driver_interface, ONLY : Driver_abort

  @M hy_DIR_TARGET_routine(vector)

  implicit none

#include "Simulation.h"
#include "constants.h"
#include "Spark.h"

  integer, intent(IN) :: stage, lo(3), loGC(3)

  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN OUT) :: starState
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN) :: flx, fly, flz
  ! lower bounds for tmpState are different between telescoping and non-telescoping
  real, @M hy_tmpState_dimension, intent(IN) :: tmpState
  real, dimension(1:, loGC(1):, loGC(2):, loGC(3):), intent(IN) :: grav
  real, dimension(loGC(1):, loGC(2):, loGC(3):), intent(IN) :: fareaX, fareaY, fareaZ, cvol
  real, dimension(loGC(1):), intent(IN) :: xCenter, xLeft, xRight
  real, dimension(loGC(2):), intent(IN) :: yLeft, yRight
  real, dimension(MDIM), intent(IN)  :: deltas
  integer, intent(IN), dimension(LOW:HIGH, MDIM, MAXSTAGE) :: limits
  real, intent(IN) :: dt, dtOld

  integer :: i, j, k, n, g

  real, dimension(NUNK_VARS) :: Vstar, V0
  real, dimension(NFLUXES) :: U0, Ustar

  real :: dx, dy, dz
  real :: ekin, emag
  ! Geometry factors
  real :: facMx, facPx, facMy, facPy, facMz, facPz
  real, dimension(NFLUXES) :: Sgeo, Shy_grv, Stot
  real :: dhdt

  !! temporaries to be used in computing geometric factors
  real    :: presStar, densStar, pmomStar, tmomStar, xmomStar
  real    :: pmagStar, xmagStar, zmagStar
  integer :: VEL_PHI, MOM_PHI, MOM_PHI_FLUX, MAG_PHI, MAG_PHI_FLUX
  integer :: VEL_ZI, MOM_ZI, MOM_ZI_FLUX, MAG_ZI, MAG_ZI_FLUX
  integer :: VEL_THT, MOM_THT, MOM_THT_FLUX
  real    :: alpha
  real    :: invr, cotan

  logical :: offload = .false.

#ifdef OMP_OL
  offload = .true.
#endif

  dx = deltas(IAXIS); dy = deltas(JAXIS); dz = deltas(KAXIS)
  dhdt = minval(deltas(1:NDIM))/(rk_coeffs(stage, 3)*dt)

  @M hy_DIR_parallel_loop(3) &
  @M hy_DIR_TARGET_map(to, [limits, rk_coeffs]) &
  @M hy_DIR_shared([limits, starState, tmpState, grav, flx, fly, flz]) &
  @M hy_DIR_shared([stage, rk_coeffs, smalld, smalle]) &
  @M hy_DIR_shared([geometry, dx, dy, dz, dt, dtOld]) &
  @M hy_DIR_private([V0, Vstar, U0, Ustar, Shy_grv, Stot, Sgeo, ekin, emag]) &
  @M hy_DIR_private([MOM_PHI, MOM_PHI_FLUX, MOM_THT, MOM_THT_FLUX, MOM_ZI, MOM_ZI_FLUX]) &
  @M hy_DIR_private([alpha, facMx, facPx, facMy, facPy, facMz, facPz, invr, cotan])
  do k = limits(LOW,KAXIS,stage), limits(HIGH,KAXIS,stage)
     do j = limits(LOW,JAXIS,stage), limits(HIGH,JAXIS,stage)
        do i = limits(LOW,IAXIS,stage), limits(HIGH,IAXIS,stage)
           V0(1:NUNK_VARS) = tmpState(1:NUNK_VARS, i, j, k)
           Vstar(1:NUNK_VARS) = starState(1:NUNK_VARS, i, j, k)
           U0(HY_MASS)            = V0(DENS_VAR)
           U0(HY_XMOM:HY_ZMOM)    = V0(DENS_VAR)*V0(VELX_VAR:VELZ_VAR)
           U0(HY_ENER)            = V0(DENS_VAR)*V0(ENER_VAR)
           U0(HY_NUM_FLUX+1:NFLUXES) = V0(SPECIES_BEGIN:MASS_SCALARS_END)*V0(DENS_VAR)
           Ustar(HY_MASS)         = Vstar(DENS_VAR)
           Ustar(HY_XMOM:HY_ZMOM) = Vstar(DENS_VAR)*Vstar(VELX_VAR:VELZ_VAR)
           Ustar(HY_ENER)         = Vstar(DENS_VAR)*Vstar(ENER_VAR)
           Ustar(HY_NUM_FLUX+1:NFLUXES) = &
               Vstar(SPECIES_BEGIN:MASS_SCALARS_END)*Vstar(DENS_VAR)
           
#ifdef SPARK_GLM
           U0(HY_FMGX:HY_FMGZ)    = V0(MAGX_VAR:MAGZ_VAR)
           U0(HY_ENER) = U0(HY_ENER)+0.5*dot_product(V0(MAGX_VAR:MAGZ_VAR),&
                V0(MAGX_VAR:MAGZ_VAR))
           U0(HY_FPSI) = V0(PSIB_VAR)
           Ustar(HY_FMGX:HY_FMGZ) = Vstar(MAGX_VAR:MAGZ_VAR)
           Ustar(HY_ENER) = Ustar(HY_ENER)+0.5*dot_product(Vstar(MAGX_VAR:MAGZ_VAR),&
                Vstar(MAGX_VAR:MAGZ_VAR))
           Ustar(HY_FPSI) = Vstar(PSIB_VAR)
#endif
           facMx = 1.0; facPx = 1.0; Sgeo = 0.0
           facMy = 1.0; facPy = 1.0;
           facMz = 1.0; facPz = 1.0;
           ! Get geometric factors and sources
           ! Get gravitational source terms
#ifdef GRID_CURVILINEAR
           if (geometry /= CARTESIAN) then
              @M hy_geom_update(Ustar, Vstar)
           endif
#endif
           @M hy_gravSources(Ustar)

           ! Sum total source terms
           Stot = Sgeo + Shy_grv

           ! Now update conserved vector with flux gradients
           Ustar = rk_coeffs(stage, 1)*U0 + rk_coeffs(stage, 2)*Ustar + rk_coeffs(stage, 3)*( &
                -dt/dx*(facPx*flx(:, i+1, j, k) - facMx*flx(:, i, j, k)) &
#if NDIM > 1
                -dt/dy*(facPy*fly(:, i, j+1, k) - facMy*fly(:, i, j, k)) &
#if NDIM ==3
                -dt/dz*(facPz*flz(:, i, j, k+1) - facMz*flz(:, i, j, k)) &
#endif
#endif
                +dt*Stot)

           ! Update primitive variables
           emag = 0.0
#ifdef SPARK_GLM
           Vstar(MAGX_VAR:MAGZ_VAR) = Ustar(HY_FMGX:HY_FMGZ)
           Vstar(PSIB_VAR) = Ustar(HY_FPSI)*exp(-alphaGLM*C_hyp/dhdt)
           emag = 0.5*dot_product(Vstar(MAGX_VAR:MAGZ_VAR),Vstar(MAGX_VAR:MAGZ_VAR))
           Vstar(MAGP_VAR) = emag
           Ustar(HY_ENER) = Ustar(HY_ENER) - emag
#endif
           Vstar(DENS_VAR)          = max(Ustar(HY_MASS),smalld)
           Vstar(VELX_VAR:VELZ_VAR) = Ustar(HY_XMOM:HY_ZMOM)/Vstar(DENS_VAR)
           Vstar(ENER_VAR)          = max(smalle,Ustar(HY_ENER)/Vstar(DENS_VAR))

           ekin = .5*dot_product(Vstar(VELX_VAR:VELZ_VAR),Vstar(VELX_VAR:VELZ_VAR))
           Vstar(EINT_VAR) = max(smalle,Vstar(ENER_VAR)-ekin)

           ! Divide partial densities by new mass densities to finalize
           ! update of new mass fractions.
           Vstar(SPECIES_BEGIN:MASS_SCALARS_END) = &
               Ustar(HY_NUM_FLUX+1:NFLUXES)/Vstar(DENS_VAR)
#ifdef GPOT_VAR
           ! Now extrapolate gravity to intermediate time state
           ! the star state GPOT_VAR will be reset so that GPOL_VAR isn't screwed up
           Vstar(GPOT_VAR) = rk_coeffs(stage, 1)*V0(GPOT_VAR) + rk_coeffs(stage, 2)*Vstar(GPOT_VAR) &
                + rk_coeffs(stage, 3)*dt*(V0(GPOT_VAR) - V0(GPOL_VAR))/dtOld
#endif
           ! save the solution in primitive form
           starState(1:NUNK_VARS, i, j, k) = Vstar(1:NUNK_VARS)
        enddo !i
     enddo !j
  enddo !k

end subroutine hy_rk_updateSoln
