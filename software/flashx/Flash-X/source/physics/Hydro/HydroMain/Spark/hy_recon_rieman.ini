[hy_recon_declare]
definition=
  real :: invSumAlpha, abs_betadiff
  real, dimension(5) :: stencil
  real, dimension(3) :: W5p, W5m, betaWeno, Alpha5, omega
  real :: mags, betaSum
  !! Set WENO5 coefficients once and for all
  !u_{1,i+1/2}= 2/6*u_{i-2} -7/6*u_{i-1} +11/6*u_{i}
  real, dimension(3) :: coeff1p1 = (/ 2./6., -7./6., 11./6./)
  !u_{2,i+1/2}=-1/6*u_{i-2} +5/6*u_{i-1} + 2/6*u_{i}
  real, dimension(3) :: coeff1p2 = (/-1./6.,  5./6.,  2./6./)
  !u_{3,i+1/2}= 2/6*u_{i-2} +5/6*u_{i-1} - 1/6*u_{i}
  real, dimension(3) :: coeff1p3 = (/ 2./6.,  5./6., -1./6./)
  ! linear weights for i+1/2, (gamma1,gamma2,gamma3)
  real, dimension(3) :: linWp   = (/0.1, 0.6, 0.3/)
  !u_{1,i-1/2}=-1/6*u_{i-2} +5/6*u_{i-1} + 2/6*u_{i}
  real, dimension(3) :: coeff1m1 = (/-1./6.,  5./6.,  2./6./)
  !u_{2,i-1/2}= 2/6*u_{i-2} +5/6*u_{i-1} - 1/6*u_{i}
  real, dimension(3) :: coeff1m2 = (/ 2./6.,  5./6., -1./6./)
  !u_{3,i-1/2}=11/6*u_{i-2} -7/6*u_{i-1} + 2/6*u_{i}
  real, dimension(3) :: coeff1m3 = (/ 11./6.,-7./6.,  2./6./)
  ! linear weights for i-1/2, (gamma1,gamma2,gamma3)
  real, dimension(3) :: linWm   = (/0.3, 0.6, 0.1/)

  real, parameter :: epsilon = 1.e-36
  real, parameter :: n13o12 = 13./12.

  integer, parameter :: cntr = 3   ! five-point stencil, center idx == 3


[hy_riemann_declare]
definition=
  real:: speed
  real :: SL,SR,cfL,cfR,aL2,aR2,velNL,velNR
  real :: dStarL,dStarR,totalPresL,totalPresR
  real :: BxStar,ByStar,BzStar,Bn_hll,pStar,qStar
  real :: denomL,denomR,numerL,numerR
  real, dimension(HY_NUM_FLUX) :: UL,UR,Uhll,UCstarR,UCstarL
  real, dimension(HY_NUM_FLUX) :: FL,FR
  real :: magBL2,magBR2,magNL,magNR
  real :: Bn_glm, Psi_glm
  real, dimension(HY_NUM_VARS) :: VL, VR
  real, dimension(HY_NUM_FLUX) :: Fstar


[hy_DIR_recon_private]
definition=
  @M hy_DIR_private([W5p, W5m, betaWeno, Alpha5, omega, invSumAlpha, abs_betadiff])
[hy_DIR_recon_shared]
definition=
  @M hy_DIR_shared([coeff1p1, coeff1p2, coeff1p3, coeff1m1, coeff1m2, coeff1m3, linWp, linWm])

[hy_recon]
definition=
  s = 1
  do kk = k-2*ks, k+2*ks
  do jj = j-2*js, j+2*js
  do ii = i-2*is, i+2*is
    stencil(s) = scr_rope(v, ii, jj, kk)
    s = s + 1
  enddo
  enddo
  enddo

  W5p(1) = dot_product(coeff1p1(1:3), stencil(cntr-2:cntr+0))
  W5p(2) = dot_product(coeff1p2(1:3), stencil(cntr-1:cntr+1))
  W5p(3) = dot_product(coeff1p3(1:3), stencil(cntr-0:cntr+2))
  !!
  !! Calculate smoothness indicators at i+1/2
  betaWeno(1) = n13o12*( stencil(cntr-2) - 2.*stencil(cntr-1) + stencil(cntr) )**2 &
                + 0.25*( stencil(cntr-2) - 4.*stencil(cntr-1) + 3.*stencil(cntr) )**2
  betaWeno(2) = n13o12*( stencil(cntr-1) - 2.*stencil(cntr) + stencil(cntr+1) )**2 &
                + 0.25*( stencil(cntr-1) - stencil(cntr+1) )**2
  betaWeno(3) = n13o12*( stencil(cntr) - 2.*stencil(cntr+1) + stencil(cntr+2) )**2 &
                + 0.25*( 3.*stencil(cntr) - 4.*stencil(cntr+1) + stencil(cntr+2) )**2
  !!
  !! Use problem-adaptive epsilong as in Tchekovskoy7, A3
  ! This does not seem to work with the WENO-Z indicators of Borges+08
  ! mags(v) = scr_rope(@M ind_m(2))**2 + scr_rope(@M ind_m(1))**2 + scr_rope(@M ind_p(0))**2 &
  !      + scr_rope(@M ind_p(1))**2 + scr_rope(@M ind_p(2))**2
  ! betaWeno(1) = betaWeno(1) + epsilon*mags(v) + TINY(1.0)
  ! betaWeno(2) = betaWeno(2) + epsilon*mags(v) + TINY(1.0)
  ! betaWeno(3) = betaWeno(3) + epsilon*mags(v) + TINY(1.0)
  !!
  !! This is WENO-Zv this is very similar to weno5 with wenoExp=1
  abs_betadiff = abs(betaWeno(1) - betaWeno(3))
  Alpha5(1:3) = linWp(1:3)*(1. + abs_betadiff/(betaWeno(1:3) + epsilon))
  !!
  !! Normalize nonlinear weights at i+1/2
  invSumAlpha = 1./sum(Alpha5(1:3))
  omega(1:3) = invSumAlpha*Alpha5(1:3)
  !!
  !! Compute interface value at i+1/2
  scr_uPlus(v,i,j,k)  = dot_product(omega(1:3), W5p(1:3))
  !! Apply flattening
  scr_uPlus(v ,i,j,k) = flat3d(i,j,k)*scr_uPlus(v ,i,j,k) + (1.-flat3d(i,j,k))*stencil(cntr)
  !!
  !! Now move on to i-1/2
  !!  
  !! Calculate interface values at i-1/2
  W5m(1) = dot_product(coeff1m1(1:3), stencil(cntr-2:cntr+0))
  W5m(2) = dot_product(coeff1m2(1:3), stencil(cntr-1:cntr+1))
  W5m(3) = dot_product(coeff1m3(1:3), stencil(cntr-0:cntr+2))
  !! This is WENO-Z
  Alpha5(1:3) = linWm(1:3)*(1. + abs_betadiff/(betaWeno(1:3) + epsilon))
  !!
  !! Normalize nonlinear weights at i-1/2
  invSumAlpha = 1./sum(Alpha5(1:3))
  omega(1:3) = invSumAlpha*Alpha5(1:3)
  !!
  !! Compute interface value at i-1/2
  scr_uMinus(v,i,j,k) = dot_product(omega(1:3), W5m(1:3))
  !! Apply flattening
  scr_uMinus(v ,i,j,k) = flat3d(i,j,k)*scr_uMinus(v ,i,j,k) + (1.-flat3d(i,j,k))*stencil(cntr)
  !! Check for monotonicity
  if ( (scr_uPlus(v,i,j,k)-stencil(cntr))*(stencil(cntr)-scr_uMinus(v,i,j,k)) <= 0. ) then
     scr_uPlus(v,i,j,k)  = stencil(cntr)
     scr_uMinus(v,i,j,k) = stencil(cntr)
  end if



[hy_DIR_riemann_private]
definition=
  @M hy_DIR_private([v, VL, VR, Fstar, inShock]) &
  @M hy_DIR_private([UL, UR, Uhll, UCstarR, UCstarL, FL, FR]) &
  @M hy_DIR_private([velNL, velNR, aL2, aR2]) &
  @M hy_DIR_private([magNL, magNR, Bn_glm, Psi_glm, magBL2, magBR2]) &
  @M hy_DIR_private([cfL, cfR, SL, SR, speed, totalPresL, totalPresR]) &
  @M hy_DIR_private([pStar, qStar, numerL, numerR, denomL, denomR]) &
  @M hy_DIR_private([dStarL, dStarR]) &
  @M hy_DIR_private([u2, E, B2, UB, Ptot])

[hy_DIR_riemann_shared]
definition=

[hy_riemann]
definition=
  ! Normal velocity
  velNL = VL(HY_VELX+dir-1)
  velNR = VR(HY_VELX+dir-1)
  !!
  ! Set sound speed
  aL2   = VL(HY_GAMC)*VL(HY_PRES)/VL(HY_DENS)
  aR2   = VR(HY_GAMC)*VR(HY_PRES)/VR(HY_DENS)
  !!
  ! Set zero magnetic quantities by default for hydro
  magNL = 0.
  magNR = 0.
 #ifdef SPARK_GLM /* compute additional MHD waves */
  ! Reset the left and right states for the GLM evolution equations
  ! This yields the exact solution for the fluxes of the 2x2 lienar GLM system
  ! See Mignone & Tzeferacos 2010, sec. 3.2
  Bn_glm  = 0.5*(VL(HY_MAGX+dir-1)+VR(HY_MAGX+dir-1)) - 0.5/C_hyp*(VR(HY_PSIB) - VL(HY_PSIB))
  Psi_glm = 0.5*(VL(HY_PSIB)+VR(HY_PSIB)) - 0.5*C_hyp*(VR(HY_MAGX+dir-1)-VL(HY_MAGX+dir-1))
  magNL = VL(HY_MAGX+dir-1)
  magNR = VR(HY_MAGX+dir-1)
  magBL2= 0.0
  magBR2= 0.0
  do v=HY_MAGX,HY_MAGZ
     magBL2 = magBL2 + VL(v)*VL(v) / VL(HY_DENS)
     magBL2 = magBL2 + VR(v)*VR(v) / VR(HY_DENS)
  end do
 #endif
  !!
  ! Check unphysical negativity and cycle riemann loop if necessary
  if ((VL(HY_DENS) < tinyZero .and. VL(HY_DENS) > 0.) .or. &
      (VR(HY_DENS) < tinyZero .and. VR(HY_DENS) > 0.) .or. &
      (VL(HY_PRES) < tinyZero .and. VL(HY_PRES) > 0.) .or. &
      (VR(HY_PRES) < tinyZero .and. VR(HY_PRES) > 0.)) then
     ! This could be vacuum limit. We return with zero flux.
     Fstar = 0.
     scr_flux(1:HY_NUM_FLUX,i,j,k) = Fstar(1:HY_NUM_FLUX)
     cycle
  elseif (aL2 < 0. .or. aR2 < 0.) then
     print *, "[hy_rk_getFaceFlux]: imaginary sound speed is detected."
  endif
  !!
  cfL = sqrt(aL2)
  cfR = sqrt(aR2)
 #ifdef SPARK_GLM
  cfL = sqrt(0.5*(aL2 + magBL2 + sqrt((aL2 + magBL2 )**2 - 4.*aL2*magNL*magNL/VL(HY_DENS))))
  cfR = sqrt(0.5*(aR2 + magBR2 + sqrt((aR2 + magBR2 )**2 - 4.*aR2*magNR*magNR/VR(HY_DENS))))
 #endif
  !!
  ! Get left/right going fastest wave speeds SL & SR for the left and right states
  ! by S. F. Davis, SIAM J. Sci. Stat, Comput., 9(1988) 445.
  ! Also see Miyoshi, Kusano, JCP, 208 (2005)
  SL = min(velNL - cfL, velNR - cfR)
  SR = max(velNL + cfL, velNR + cfR)
  !!
  ! Output maximum local wave speed for dt calculation
  speed = max(abs(SL),abs(SR))
  !!
  ! Total pressure
  totalPresL = VL(HY_PRES)
  totalPresR = VR(HY_PRES)
 #ifdef SPARK_GLM /* for MHD */
  do v=HY_MAGX,HY_MAGZ
     totalPresL = totalPresL + 0.5*(VL(v)*VL(v))
     totalPresR = totalPresR + 0.5*(VR(v)*VR(v))
  end do
 #endif
  !!
  ! Convert primitive variables to conservative variables
  !!!*** We need to think about whether this shoud be extracted out and done on the whole block
  !! 
  @M hy_prim2con(VL,UL)
  @M hy_prim2con(VR,UR)
  @M hy_prim2flx(dir,VL,FL)
  @M hy_prim2flx(dir,VR,FR)
  !!
  ! Get HLL states for later use
  if (SL > 0.) then
     Uhll = UL
  elseif ((SL <= 0.) .and. (SR >= 0.)) then
     Uhll = (SR*UR - SL*UL - FR + FL)/(SR - SL)
     !! Pretty sure the following is not need for pressure already in momentum
     !! fluxes (done in hy_prim2flx). I.e., fP = 1.0
     !  Uhll(HY_DENS+dir) = Uhll(HY_DENS+dir) + &
     !       (  totalPresL - totalPresR  )/(SR - SL) * (1.0-fP)
  else
     Uhll = UR
  endif
  !!
 #ifdef SPARK_GLM /* for MHD */
  ! Calculate intermediate states --------------
  Bn_hll = Uhll(HY_FMGX+dir-1) !=(SR*magNR-SL*magNL)/(SR-SL)
  BxStar = Uhll(HY_FMGX)       !BxStarL = BxStarR = BxHLL
  ByStar = Uhll(HY_FMGY)       !ByStarL = ByStarR = ByHLL
  BzStar = Uhll(HY_FMGZ)       !BzStarL = BzStarR = BzHLL
 #endif
  !!
  ! (1) Normal velocity component
  ! qStarL = qStarR = qStar
  qStar=(VR(HY_DENS)*velNR*(SR-velNR) &
       - VL(HY_DENS)*velNL*(SL-velNL)  &
       + totalPresL - totalPresR       &
       - magNL**2   + magNR**2)
  ! print*, (VR(HY_DENS)*(SR-velNR) - VL(HY_DENS)*(SL-velNL))
  qStar = qStar/(VR(HY_DENS)*(SR-velNR) - VL(HY_DENS)*(SL-velNL))
  !!
  ! Convenient parameters
  numerL = SL-velNL
  denomL = SL-qStar ! I believe this could be made an inverse to save FLOPS
  numerR = SR-velNR
  denomR = SR-qStar
  !!
  ! (2) Total pressure in the star region
  ! pStarL = pStarR = pStar
  pStar = VL(HY_DENS)*numerL*(qStar-velNL)+totalPresL
 #ifdef SPARK_GLM /* for MHD */
  pStar = pStar - magNL**2 + Bn_hll**2
 #endif
 !!
  ! (3) Density
  dStarL = UL(HY_MASS)*numerL/denomL
  dStarR = UR(HY_MASS)*numerR/denomR
  !!
  ! (4) Conserved variables in the two-state (left & right) star regions
  UCstarL(HY_MASS)   = dStarL
  UCstarL(HY_ENER)   = UL(HY_ENER)*numerL/denomL + &
       ((pStar*qStar - totalPresL*velNL))/denomL
  !!
  UCstarR(HY_MASS)   = dStarR
  UCstarR(HY_ENER)   = UR(HY_ENER)*numerR/denomR + &
       ((pStar*qStar - totalPresR*velNR))/denomR
  !!
 #ifdef SPARK_GLM /* for MHD */
  UCstarL(HY_FMGX:HY_FMGZ)= Uhll(HY_FMGX:HY_FMGZ)
  UCstarL(HY_ENER) = UCstarL(HY_ENER) &
       -(Bn_hll*dot_product(Uhll(HY_FMGX:HY_FMGZ),Uhll(HY_XMOM:HY_ZMOM))/Uhll(HY_MASS) &
       -  magNL*dot_product(VL(HY_MAGX:HY_MAGZ),  VL(HY_VELX:HY_VELZ)))/denomL
  !!
  UCstarR(HY_FMGX:HY_FMGZ)= Uhll(HY_FMGX:HY_FMGZ)
  UCstarR(HY_ENER) = UCstarR(HY_ENER) &
       -(Bn_hll*dot_product(Uhll(HY_FMGX:HY_FMGZ),Uhll(HY_XMOM:HY_ZMOM))/Uhll(HY_MASS) &
       -  magNR*dot_product(VR(HY_MAGX:HY_MAGZ),  VR(HY_VELX:HY_VELZ)))/denomR
 #endif
  !!
  select case (dir)
  case (IAXIS)
     UCstarL(HY_XMOM) = dStarL*qStar
     UCstarL(HY_YMOM) = UL(HY_YMOM)*numerL/denomL
     UCstarL(HY_ZMOM) = UL(HY_ZMOM)*numerL/denomL
  !!
     UCstarR(HY_XMOM) = dStarR*qStar
     UCstarR(HY_YMOM) = UR(HY_YMOM)*numerR/denomR
     UCstarR(HY_ZMOM) = UR(HY_ZMOM)*numerR/denomR
  !!
 #ifdef SPARK_GLM /* for MHD */
     UCstarL(HY_YMOM) = UCstarL(HY_YMOM) - (BxStar*ByStar-VL(HY_MAGX)*VL(HY_MAGY))/denomL
     UCstarL(HY_ZMOM) = UCstarL(HY_ZMOM) - (BxStar*BzStar-VL(HY_MAGX)*VL(HY_MAGZ))/denomL
  !!
     UCstarR(HY_YMOM) = UCstarR(HY_YMOM) - (BxStar*ByStar-VR(HY_MAGX)*VR(HY_MAGY))/denomR
     UCstarR(HY_ZMOM) = UCstarR(HY_ZMOM) - (BxStar*BzStar-VR(HY_MAGX)*VR(HY_MAGZ))/denomR
 #endif
  !!
  case (JAXIS)
     UCstarL(HY_XMOM) = UL(HY_XMOM)*numerL/denomL
     UCstarL(HY_YMOM) = dStarL*qStar
     UCstarL(HY_ZMOM) = UL(HY_ZMOM)*numerL/denomL
  !!
     UCstarR(HY_XMOM) = UR(HY_XMOM)*numerR/denomR
     UCstarR(HY_YMOM) = dStarR*qStar
     UCstarR(HY_ZMOM) = UR(HY_ZMOM)*numerR/denomR
  !!
 #ifdef SPARK_GLM /* for MHD */
     UCstarL(HY_XMOM) = UCstarL(HY_XMOM) - (ByStar*BxStar-VL(HY_MAGY)*VL(HY_MAGX))/denomL
     UCstarL(HY_ZMOM) = UCstarL(HY_ZMOM) - (ByStar*BzStar-VL(HY_MAGY)*VL(HY_MAGZ))/denomL
  !!
     UCstarR(HY_XMOM) = UCstarR(HY_XMOM) - (ByStar*BxStar-VR(HY_MAGY)*VR(HY_MAGX))/denomR
     UCstarR(HY_ZMOM) = UCstarR(HY_ZMOM) - (ByStar*BzStar-VR(HY_MAGY)*VR(HY_MAGZ))/denomR
 #endif
   !!
  case (KAXIS)
     UCstarL(HY_XMOM) = UL(HY_XMOM)*numerL/denomL
     UCstarL(HY_YMOM) = UL(HY_YMOM)*numerL/denomL
     UCstarL(HY_ZMOM) = dStarL*qStar
  !!
     UCstarR(HY_XMOM) = UR(HY_XMOM)*numerR/denomR
     UCstarR(HY_YMOM) = UR(HY_YMOM)*numerR/denomR
     UCstarR(HY_ZMOM) = dStarR*qStar
  !!
 #ifdef SPARK_GLM /* for MHD */
     UCstarL(HY_XMOM) = UCstarL(HY_XMOM) - (BzStar*BxStar-VL(HY_MAGZ)*VL(HY_MAGX))/denomL
     UCstarL(HY_YMOM) = UCstarL(HY_YMOM) - (BzStar*ByStar-VL(HY_MAGZ)*VL(HY_MAGY))/denomL
  !!
     UCstarR(HY_XMOM) = UCstarR(HY_XMOM) - (BzStar*BxStar-VR(HY_MAGZ)*VR(HY_MAGX))/denomR
     UCstarR(HY_YMOM) = UCstarR(HY_YMOM) - (BzStar*ByStar-VR(HY_MAGZ)*VR(HY_MAGY))/denomR
 #endif
  end select
  !!
  !1
  ! End of calculating HLLC intermediate states ---------------------------
  !!
  ! (5) Finally, calculate HLLC fluxes
  if (SL >= 0.) then
     Fstar = FL
  elseif ((SL < 0.).and. (qStar >= 0.)) then
     Fstar = FL + SL*(UCstarL - UL)
  elseif ((qStar <0.) .and. (SR >= 0.)) then
     Fstar = FR + SR*(UCstarR - UR)
  else
     Fstar = FR
  endif
  !!
  !! The following are the HLLE fluxes.
  if (hybridRiemann .AND. inShock) then
     if (SL > 0.) then
        Fstar = FL
     elseif (SR < 0.) then
        Fstar = FR
     else !if ((SL <= 0.) .and. (SR >= 0.)) then
        Fstar = (SR*FL - SL*FR + SR*SL*(UR - UL))/(SR - SL)
     endif
  end if
  !!
 #ifdef SPARK_GLM
  ! The exact fluxes for the 2x2 GLM sub-system
  Fstar(HY_FMGX+dir-1) = Psi_glm
  Fstar(HY_FPSI) = C_hyp*C_hyp*Bn_glm
 #endif

