[hy_recon_declare]
definition =
    real :: del_p,del_m,delbar
    real, dimension(3) :: stencil
    integer, parameter :: cntr = 2   ! three-point stencil, center idx == 2

[hy_DIR_recon_private]
definition=
  @M hy_DIR_private([delbar, del_p, del_m])
[hy_DIR_recon_shared]
definition=

[hy_recon]
definition = 
  s = 1
  do kk = k-1*ks, k+1*ks
  do jj = j-1*js, j+1*js
  do ii = i-1*is, i+1*is
    stencil(s) = scr_rope(v, ii, jj, kk)
    s = s + 1
  enddo
  enddo
  enddo
  ! First compute delbar
  del_p = stencil(cntr+1) - stencil(cntr)
  del_m = stencil(cntr) - stencil(cntr-1)
  delbar = .5 * (sign(1.,del_p) + sign(1.,del_m))*min(abs(del_p),abs(del_m))
  !
  ! Interpolate to plus side of zone
  scr_uPlus(v,i,j,k)  = stencil(cntr) + 0.5*delbar
  ! Interpolate to minus side of zone
  scr_uMinus(v,i,j,k) = stencil(cntr) - 0.5*delbar


[hy_riemann_declare]
definition=
  real, dimension(HY_NUM_VARS) :: VL, VR
  real, dimension(HY_NUM_FLUX) :: Fstar
  real ::  speed
  real :: SL,SR,cfL,cfR,aL2,aR2,velNL,velNR
  real :: magBL2,magBR2,magNL,magNR
  real, dimension(HY_NUM_FLUX) :: UL,UR,FL,FR
  !

[hy_DIR_riemann_private]
definition=
  @M hy_DIR_private([v, VL, VR, Fstar, inShock]) &
  @M hy_DIR_private([UL, UR, FL, FR]) &
  @M hy_DIR_private([velNL, velNR, aL2, aR2]) &
  @M hy_DIR_private([magNL, magNR, magBL2, magBR2]) &
  @M hy_DIR_private([cfL, cfR, SL, SR, speed]) &
  @M hy_DIR_private([u2, E, B2, UB, Ptot])

[hy_DIR_riemann_shared]
definition=

[hy_riemann]
definition=
  Fstar = 0.0
  !
  ! Normal velocity
  velNL = VL(HY_VELX+dir-1)
  velNR = VR(HY_VELX+dir-1)
  !
  ! Set sound speed
  aL2   = VL(HY_GAMC)*VL(HY_PRES)/VL(HY_DENS)
  aR2   = VR(HY_GAMC)*VR(HY_PRES)/VR(HY_DENS)
  !
  ! Check unphysical negativity
  if ((VL(HY_DENS) < tinyZero .and. VL(HY_DENS) > 0.) .or. &
       (VR(HY_DENS) < tinyZero .and. VR(HY_DENS) > 0.) .or. &
       (VL(HY_PRES) < tinyZero .and. VL(HY_PRES) > 0.) .or. &
       (VR(HY_PRES) < tinyZero .and. VR(HY_PRES) > 0.)) then
     ! This could be vacuum limit. We return with zero flux.
     Fstar = 0.
     scr_flux(1:HY_NUM_FLUX,i,j,k) = Fstar(1:HY_NUM_FLUX)
     cycle
  elseif (aL2 < 0. .or. aR2 < 0.) then
     print *, "[hy_rk_getFaceFlux]: imaginary sound speed is detected."
  endif
  cfL = sqrt(aL2)
  cfR = sqrt(aR2)
  !
  ! Get left/right going fastest wave speeds SL & SR for the left and right states
  ! by S. F. Davis, SIAM J. Sci. Stat, Comput., 9(1988) 445.
  ! Also see Miyoshi, Kusano, JCP, 208 (2005)
  SL = min(velNL - cfL, velNR - cfR)
  SR = max(velNL + cfL, velNR + cfR)
  !
  ! Output maximum local wave speed for dt calculation
  !speed = abs(velNL)+0.5*(cfL+cfR)
  speed = max(abs(SL),abs(SR))
  !
  ! Convert primitive variables to conservative variables
  @M hy_prim2con(VL,UL)
  @M hy_prim2con(VR,UR)
  @M hy_prim2flx(dir,VL,FL)
  @M hy_prim2flx(dir,VR,FR)
  !
  if (SL > 0.) then
     !Ustar(HY_DENS:HY_PRES) = UL(HY_DENS:HY_PRES)
     Fstar = FL
  elseif (SR < 0.) then
     !Ustar(HY_DENS:HY_PRES) = UR(HY_DENS:HY_PRES)
     Fstar = FR
  else !if ((SL <= 0.) .and. (SR >= 0.)) then
     !Ustar(HY_DENS:HY_PRES) = (SR*UR - SL*UL - FR + FL)/(SR - SL)
     Fstar = (SR*FL - SL*FR + SR*SL*(UR - UL))/(SR - SL)
  endif


