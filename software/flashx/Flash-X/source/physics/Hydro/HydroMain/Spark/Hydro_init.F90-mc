!> @copyright Copyright 2023 UChicago Argonne, LLC and contributors
!!
!! @licenseblock
!!   Licensed under the Apache License, Version 2.0 (the "License");
!!   you may not use this file except in compliance with the License.
!!
!!   Unless required by applicable law or agreed to in writing, software
!!   distributed under the License is distributed on an "AS IS" BASIS,
!!   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!   See the License for the specific language governing permissions and
!!   limitations under the License.
!! @endlicenseblock
!!
!! @file

!> @ingroup HydroSpark
!!
!! @brief Initialize unit scope variables for Hydro
!!
!! @stubref{Hydro_init}
!<

!!NOVARIANTS
subroutine Hydro_init()

  use Hydro_data
  use Driver_interface,            ONLY : Driver_abort, Driver_getMype, &
       Driver_getNumProcs,    &
       Driver_getComm
  use RuntimeParameters_interface, ONLY : RuntimeParameters_get, &
       RuntimeParameters_mapStrToInt
  use PhysicalConstants_interface, ONLY : PhysicalConstants_get
  use Logfile_interface,           ONLY : Logfile_stampMessage, &
       Logfile_stampVarMask, &
       Logfile_stamp
  use Grid_interface,              ONLY : Grid_setFluxHandling, Grid_getMaxRefinement, Grid_getMaxCells
  use IO_interface,                ONLY : IO_getScalar, IO_setScalar

  implicit none

#include "constants.h"
#include "Simulation.h"
#include "Eos.h"
#include "Spark.h"

  character(len=MAX_STRING_LENGTH) :: str
  integer :: i
  logical :: threadBlockListBuild, threadWithinBlockBuild
  integer, dimension(LOW:HIGH,MDIM) :: blkLimits,blkLimitsGC
  integer :: max_edge, max_edge_y, max_edge_z, space


  ! Everybody should know these
  call Driver_getMype(MESH_COMM,hy_meshMe)
  call Driver_getNumProcs(MESH_COMM,hy_meshNumProcs)
  call Driver_getComm(GLOBAL_COMM,hy_globalComm)

  call RuntimeParameters_get("useHydro",hy_useHydro) !!DEV: not yet systematically honored

  call RuntimeParameters_get("cfl", hy_cfl)

  call RuntimeParameters_get("restart", hy_restart)
  if (hy_restart) then
     call IO_getScalar("dt", hy_dt)
     hy_dtmin = hy_dt
     call IO_getScalar("C_hyp", hy_lChyp)
  else
     hy_dtmin = HUGE(1.0)
     ! Initialize local maximum hyperbolic speed
     hy_lChyp = TINY(1.0)
     call IO_setScalar("C_hyp", hy_lChyp)
  endif

#ifdef FLASH_GRID_PARAMESH
  if ((NGUARD > 4) .and. (NXB < 2*NGUARD)) then
     call Driver_abort&
          ("[Hydro_init]: Hydro requires larger NXB, etc. for the given number of guardcells.")
  endif
#endif


  !! Need to issue a warning or error if PM4dev is not used

  call RuntimeParameters_get("smlrho",              hy_smalldens)
  call RuntimeParameters_get("smallp",              hy_smallpres)
  call RuntimeParameters_get("smallE",              hy_smallE)
  call RuntimeParameters_get("smallx",              hy_smallX)
  call RuntimeParameters_get("smallu",              hy_smallu)

  call RuntimeParameters_get("hy_mp5ZeroTol",       hy_mp5ZeroTol)

  call RuntimeParameters_get("updateHydroFluxes",   hy_updateHydrofluxes)
  call RuntimeParameters_get("use_hybridRiemann",   hy_hybridRiemann)
  call RuntimeParameters_get("use_flattening",      hy_flattening)

  call RuntimeParameters_get("cvisc",               hy_cvisc)
  call RuntimeParameters_get("lim_rad",             hy_limRad)

  call RuntimeParameters_get("alpha_glm",           hy_alphaGLM)

  !! Geometry ------------------------------------------------------------------
  call RuntimeParameters_get("geometry", str)
  call RuntimeParameters_mapStrToInt(str, hy_geometry)
  if (hy_geometry .NE. CARTESIAN .AND. hy_meshME == MASTER_PE )  then
     print *, "[Hydro_init]: Using non-Cartesian Geometry!"
  endif
  call RuntimeParameters_get("flux_correct", hy_fluxCorrect)
  call RuntimeParameters_get("flux_correct_perLevel", hy_fluxCorrectPerLevel)
  ! if (NDIM > 1) then
  if (hy_fluxCorrect) then
     if (hy_geometry == CARTESIAN) then
        call Grid_setFluxHandling('consv_flux_densities')
     else
        call Grid_setFluxHandling('consv_fluxes')
     endif
  end if
  ! end if
  !Array indicating whether to add flux into flux buffers (True)
  !or overwrite them (False).
  !This array will work for RK2 & RK3
  
  hy_addFluxArray = .true.
  hy_addFluxArray(1)=.false.

  !set up quantities specific to RK scheme (lives in Hydro_funcs)
  
  call RuntimeParameters_get("hy_useTiling", hy_useTiling)
  call RuntimeParameters_get("telescoping", hy_telescoping)
  !! For correct flux correction in non-Cartesian geometry----------------------
  do i = 1, NFLUXES
     hy_fluxCorVars(i) = i
  enddo

  !! Allow selective guardcell fill calls ---------------------------------------
  hy_gcMaskSize = NUNK_VARS
  hy_gcMask = .FALSE.

  ! Set guardcell masking for needed variables
  ! First, the standard set for plain Hydro
  hy_gcMask(DENS_VAR) = .TRUE.
  hy_gcMask(EINT_VAR) = .TRUE.
  hy_gcMask(ENER_VAR) = .TRUE.
  hy_gcMask(GAMC_VAR) = .TRUE.
  hy_gcMask(GAME_VAR) = .TRUE.
  hy_gcMask(PRES_VAR) = .TRUE.
  hy_gcMask(TEMP_VAR) = .TRUE.
  hy_gcMask(VELX_VAR) = .TRUE.
  hy_gcMask(VELY_VAR) = .TRUE.
  hy_gcMask(VELZ_VAR) = .TRUE.
  ! Now for the gravity variables
#ifdef GPOL_VAR
  hy_gcMask(GPOL_VAR) = .TRUE.
#endif
#ifdef GPOT_VAR
  hy_gcMask(GPOT_VAR) = .TRUE.
#endif
  ! Now for shock detection
#ifdef SHOK_VAR
  hy_gcMask(SHOK_VAR) = .TRUE.
#endif
  ! Now for the MHD variables, including FACEVARS: - none currently.
#ifdef SPARK_GLM
  hy_gcMask(MAGX_VAR:MAGZ_VAR) = .TRUE.
  hy_gcMask(PSIB_VAR) = .TRUE.
#endif
  ! Fill for all species/mass scalars
  hy_gcMask(SPECIES_BEGIN:MASS_SCALARS_END) = .TRUE.

  call Logfile_stampVarMask(hy_gcMask, .FALSE., '[Hydro_init]', 'gcNeed')


  call RuntimeParameters_get("threadWithinBlockBuild", threadWithinBlockBuild)
  call RuntimeParameters_get("threadHydroWithinBlock", hy_threadWithinBlock)

  if (hy_threadWithinBlock .and. .not. threadWithinBlockBuild) then
     call Logfile_stamp('WARNING! Turning off within block threading '//&
          'because FLASH is not built appropriately','[Hydro_init]')
     hy_threadWithinBlock = .false.
  end if

  if (hy_geometry == POLAR) & !Polar in 3D (that's a no no)
       call Driver_abort("[Hydro_computeDt] ERROR: Polar geometry not supported in 3D")

  call PhysicalConstants_get("Newton", hy_gravConst)
  hy_4piGinv = (4.*PI*hy_gravConst)**(-1)

  hy_bref = sqrt(4.0*PI)

#ifdef FLASH_GRID_UG
  hy_fluxCorrect = .false.
  hy_maxLev = 1
#else  
  ! mode=1 means lrefine_max, which does not change during sim.
  call Grid_getMaxRefinement(hy_maxLev, mode=1)
#endif

  call RuntimeParameters_get("hy_eosModeGc", str)
  call makeLowercase(str)
  if (str == "see eosmode") then
     call RuntimeParameters_get("eosMode", str)
  end if
  call RuntimeParameters_mapStrToInt(str, hy_eosModeGc)

#ifdef HY_RK3
  !RK3 quantities
  !Stage 1 coefficients
  ! U* = C1 * U0 + C2 * U* + C3 * dt*L(U*)
  ! U1 =  1 * U0           +  1 * dt*L(U0)
  !Stage 2 coefficients
  ! U* =  C1 * U0 +  C2 * U* +  C3 * dt*L(U*)
  ! U2 = 3/4 * U0 + 1/4 * U1 + 1/4 * dt*L(U1)
  !Stage 3 coefficients
  ! U* =  C1 * U0 +  C2 * U* +  C3 * dt*L(U*)
  ! U3 = 1/3 * U0 + 2/3 * U2 + 2/3 * dt*L(U2)
  !(remember FORTRAN is column major)
  hy_coeffArray = reshape((/1.,0.75,1./3.,0.,0.25,2./3.,1.,0.25,2./3./),(/3,3/))
  !Array containing number of guard cells on each side for
  !the telescoping update.
  hy_limitsArray = (/2*NSTENCIL, NSTENCIL, 0/)
  !Weights that scale the fluxes as they are added into the buffers.
  !Here hy_weights is
  !the same as coeff used in Github pseudocode.
  hy_weights = (/1./6., 1./6., 2./3./)
#else
  !RK2 quantities
  ! Stage 1 coefficients
  ! U* = C1 * U0 + C2 * U* + C3 * dt*L(U*)
  ! U1 =  1 * U0           +  1 * dt*L(U0)
  ! Stage 2 coefficients
  ! Now update solution based on conservative fluxes
  ! U* =  C1 * U0 +  C2 * U* +  C3 * dt*L(U*)
  ! U2 = 1/2 * U0 + 1/2 * U1 + 1/2 * dt*L(U1)
  hy_coeffArray = reshape((/1.,0.5,0.,0.,0.5,0.,1.,0.5,0./),(/3,3/))
  hy_limitsArray = (/NSTENCIL, 0, 0/)
  hy_weights = (/0.5,0.5,0./)
#endif
  call Grid_getMaxcells(hy_maxCells)
  hy_maxCells=2*NGUARD+hy_maxCells

  @M hy_DIR_TARGET_update_to([hy_cvisc, hy_limRad, hy_tiny, hy_gravConst, hy_4piGinv, hy_bref])
  @M hy_DIR_TARGET_update_to([hy_smalldens, hy_smallE, hy_smallpres, hy_smallX, hy_smallu])
  @M hy_DIR_TARGET_update_to([hy_fluxCorrect, hy_fluxCorrectPerLevel, hy_fluxCorVars, hy_geometry])
  @M hy_DIR_TARGET_update_to([hy_hybridRiemann, hy_flattening, hy_alphaGLM, hy_lChyp])
  @M hy_DIR_TARGET_update_to([hy_coeffs, hy_weights, hy_limitsArray, hy_coeffArray])
  @M hy_DIR_TARGET_update_to([hy_cfl, hy_telescoping, hy_addFluxArray, hy_maxLev, hy_maxCells])

  call check_if_omp_offload()

  @M hy_allocate_scr

contains

  subroutine check_if_omp_offload()
!$  use omp_lib, ONLY: omp_is_initial_device
    use Hydro_data, ONLY: hy_meshMe
    implicit none

    logical :: onCPU

    onCPU = .true.
#ifdef OMP_OL
    !$omp target map(tofrom: onCPU)
    !$  onCPU = omp_is_initial_device()
    !$omp end target
    !$omp barrier
#endif

    if (.not. onCPU) then
      write(*, '(A, I3, A)') "[Hydro_init] proc ", hy_meshMe, ":  GPU offloading is available"
    end if
  end subroutine check_if_omp_offload

end subroutine Hydro_init
