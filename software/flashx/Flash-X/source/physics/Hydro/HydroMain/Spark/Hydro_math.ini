
[hy_saveFluxBuf]
args= fluxBuf, farea, flux
definition=
  fluxBuf(v,i,j,k) = weights(stage)*flux(v,i,j,k) + wt*fluxBuf(v,i,j,k)


[hy_calcDivB]
definition=
 #ifdef SPARK_GLM
  @M loop_3d(blkLimits)
           divB = 0.0
 #if NDIM>1
           divB = (Uin(MAGX_VAR,i+1,j,k) - Uin(MAGX_VAR,i-1,j,k))&
                *0.5/deltas(IAXIS)
           divB = divB + (Uin(MAGY_VAR,i,j+1,k) - Uin(MAGY_VAR,i,j-1,k))&
                *0.5/deltas(JAXIS)
 #if NDIM==3
           divB = divB + (Uin(MAGZ_VAR,i,j,k+1) - Uin(MAGZ_VAR,i,j,k-1))&
                *0.5/deltas(KAXIS)
 #endif
 #endif
           Uin(DIVB_VAR,i,j,k) = divB
   @M loop_end_3d
 #endif



[hy_prim2con]
args=V1,CU
definition=
  CU = 0.0
  !!
  u2 = 0.0
  do v=HY_VELX,HY_VELZ
     u2 = u2 + V1(v)*V1(v)
  end do
  B2 = 0.
 #ifdef SPARK_GLM
  do v=HY_MAGX,HY_MAGZ
     B2 = B2 + V1(v)*V1(v)
  end do
  CU(HY_FMGX:HY_FMGZ) = V1(HY_MAGX:HY_MAGZ)
  CU(HY_FPSI) = V1(HY_PSIB)
 #endif
  !!
  CU(HY_MASS) = V1(HY_DENS)
  CU(HY_XMOM:HY_ZMOM) = V1(HY_DENS)*V1(HY_VELX:HY_VELZ)
  CU(HY_ENER) = 0.5*V1(HY_DENS)*u2 + V1(HY_RHOE) + 0.5*B2

[hy_prim2flx]
args=dir,V1,F1
definition=
   F1 = 0.0
   u2 = 0.0
   do v=HY_VELX,HY_VELZ
      u2 = u2 + V1(v)*V1(v)
   end do
   E   = 0.5*V1(HY_DENS)*u2 + V1(HY_RHOE)
   Ptot = V1(HY_PRES)
 #ifdef SPARK_GLM
   B2 = dot_product(V1(HY_MAGX:HY_MAGZ),V1(HY_MAGX:HY_MAGZ))
   UB = dot_product(V1(HY_VELX:HY_VELZ),V1(HY_MAGX:HY_MAGZ))
   ! We will NEED to check units. That could be a pain. #MHDbeNatural
   Ptot= Ptot + 0.5*B2
   E   = E + 0.5*B2
   select case(dir)
   case (IAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELX)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX) - V1(HY_MAGX)*V1(HY_MAGX) + Ptot
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY) - V1(HY_MAGX)*V1(HY_MAGY)
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ) - V1(HY_MAGX)*V1(HY_MAGZ)
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELX) - V1(HY_MAGX)*UB
      F1(HY_FMGX) = 0.
      F1(HY_FMGY) = V1(HY_VELX)*V1(HY_MAGY)-V1(HY_VELY)*V1(HY_MAGX)
      F1(HY_FMGZ) = V1(HY_VELX)*V1(HY_MAGZ)-V1(HY_VELZ)*V1(HY_MAGX)
   case (JAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELY)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX) - V1(HY_MAGY)*V1(HY_MAGX)
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY) - V1(HY_MAGY)*V1(HY_MAGY) + Ptot
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ) - V1(HY_MAGY)*V1(HY_MAGZ)
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELY) - V1(HY_MAGY)*UB
      F1(HY_FMGX) = V1(HY_VELY)*V1(HY_MAGX) - V1(HY_VELX)*V1(HY_MAGY)
      F1(HY_FMGY) = 0.
      F1(HY_FMGZ) = V1(HY_VELY)*V1(HY_MAGZ)-V1(HY_VELZ)*V1(HY_MAGY)
   case (KAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELZ)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX) - V1(HY_MAGZ)*V1(HY_MAGX)
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY) - V1(HY_MAGZ)*V1(HY_MAGY)
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ) - V1(HY_MAGZ)*V1(HY_MAGZ) + Ptot
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELZ) - V1(HY_MAGZ)*UB
      F1(HY_FMGX) = V1(HY_VELZ)*V1(HY_MAGX) - V1(HY_VELX)*V1(HY_MAGZ)
      F1(HY_FMGY) = V1(HY_VELZ)*V1(HY_MAGY) - V1(HY_VELY)*V1(HY_MAGZ)
      F1(HY_FMGZ) = 0.
   end select
 #else
   select case(dir)
   case (IAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELX)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX) + Ptot
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY)
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ)
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELX)
   case (JAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELY)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX)
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY) + Ptot
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ)
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELY)
   case (KAXIS)
      F1(HY_MASS) = V1(HY_DENS)*V1(HY_VELZ)
      F1(HY_XMOM) = F1(HY_MASS)*V1(HY_VELX)
      F1(HY_YMOM) = F1(HY_MASS)*V1(HY_VELY)
      F1(HY_ZMOM) = F1(HY_MASS)*V1(HY_VELZ) + Ptot
      F1(HY_ENER) = (E + Ptot)*V1(HY_VELZ)
   end select
 #endif

[hy_geom_flux_correct_X]
definition=
    facM = 1.0; facP = 1.0
    if (geometry /= CARTESIAN) then
       facM = fareaX(i  ,j,k)*dx/cvol(i,j,k)
       facP = fareaX(i+1,j,k)*dx/cvol(i,j,k)
       if (xCenter(i) < 0.0) then
          facM = 0.
          facP = 0.
       end if
    end if

[hy_geom_flux_correct_Y]
definition=
       facM = 1.0; facP = 1.0    
    if (geometry == SPHERICAL) then
       facM = fareaY(i,j  ,k)*dx/cvol(i,j,k)
       facP = fareaY(i,j+1,k)*dx/cvol(i,j,k)
       if (xCenter(i) < 0.0) then
          facM = 0.
          facP = 0.
       end if
    end if

[hy_geom_flux_correct_Z]
definition=
       facM = 1.0; facP = 1.0    
    if (geometry /= CARTESIAN) then
       facM = fareaZ(i,j,k  )*dx/cvol(i,j,k)
       facP = fareaZ(i,j,k+1)*dx/cvol(i,j,k)
       if (xCenter(i) < 0.0) then
          facM = 0.
          facP = 0.
       end if
    end if


[hy_geom_flux_dxdv]
definition=
    facM = 1.0; facP = 1.0
    if (geometry /= CARTESIAN) then
       facM = dx/cvol(i,j,k)
       facP = facM
       if (xCenter(i) < 0.0) then
          facM = 0.
          facP = 0.
       end if
    end if


[hy_geom_update]
args = U1,V1
definition=
      select case(geometry) ! First, select whether y or z is phi-direction
      case(CYLINDRICAL)
       MOM_PHI = HY_ZMOM
       MOM_PHI_FLUX = HY_ZMOM
       MOM_ZI       = HY_YMOM
       MOM_ZI_FLUX  = HY_YMOM
 #ifdef SPARK_GLM
       MAG_PHI      = HY_MAGZ
 #endif
       alpha = 1.
    case(POLAR)
       MOM_PHI      = HY_YMOM
       MOM_PHI_FLUX = HY_YMOM
       MOM_ZI       = HY_ZMOM
       MOM_ZI_FLUX  = HY_ZMOM
 #ifdef SPARK_GLM
       MAG_PHI      = HY_MAGY
 #endif
       alpha = 1.
    case(SPHERICAL)
       MOM_PHI      = HY_ZMOM
       MOM_PHI_FLUX = HY_ZMOM
       MOM_THT      = HY_YMOM
       MOM_THT_FLUX = HY_YMOM
       ! dx_sph = (xRight(i)**3 - xLeft(i)**3) / (3.*xCenter(i)**2)
       alpha  = 2.
    end select
    facMx = fareaX(i,j,k)*dx/cvol(i,j,k)
    facPx = fareaX(i+1,j,k)*dx/cvol(i,j,k)
 #if NDIM > 1
    facMy = 1.0
    facPy = 1.0
    if (geometry == SPHERICAL) then
        facMy = fareaY(i,j,k)*dy/cvol(i,j,k)
        facPy = fareaY(i,j+1,k)*dy/cvol(i,j,k)
    end if
 #endif
 #if NDIM == 3
    facMz = fareaZ(i,j,k)*dz/cvol(i,j,k)
    facPz = fareaZ(i,j,k+1)*dz/cvol(i,j,k)
 #endif
    Sgeo = 0.
    !! Calculate geometrical source terms.  See Skinner & Ostriker (2010) eqn 75
    if ((geometry == SPHERICAL) .and. (NDIM > 1)) then
        !! works for 1D spherical as well, but have not tested 1D spherical MHD, so only including the expression for Hydro. - Sudarshan
        !! volume averaged approximation to 1/r and cotan(\theta)
        !! Using volume averaged terms removes the need for scaling factors, such as dx/dx_sph is no longer needed for 1D spherical run.
        invr = (3.0*(xRight(i) + xLeft(i)))/ &
                (2.0*(xRight(i)**2 + xRight(i)*xLeft(i) + xLeft(i)**2))
 #if NDIM > 1
        cotan = (sin(yRight(j)) - sin(yLeft(j)))/ &
            (cos(yLeft(j)) - cos(yRight(j)))
 #endif
        ! r term: (T_{\phi \phi} + T_{\theta \theta})/R
        Sgeo(HY_XMOM) = ((V1(DENS_VAR)*V1(VELZ_VAR)*V1(VELZ_VAR) + V1(PRES_VAR)) + &
                     (V1(DENS_VAR)*V1(VELY_VAR)*V1(VELY_VAR) + V1(PRES_VAR))) * invr
 #if NDIM > 1
        ! theta term: -(T_{R \theta} - Cot(\theta)*T_{\phi \phi})/R
        Sgeo(MOM_THT) = -((V1(DENS_VAR)*V1(VELX_VAR)*V1(VELY_VAR)) - &
                     (V1(DENS_VAR)*V1(VELZ_VAR)*V1(VELZ_VAR) + V1(PRES_VAR))*cotan) * invr
 #endif
 #if NDIM == 3
        ! phi term: -(T_{R \phi} + Cot(\theta)*T_{\theta \phi})/R
        Sgeo(MOM_PHI) = -((V1(DENS_VAR)*V1(VELX_VAR)*V1(VELZ_VAR)) + &
                (V1(DENS_VAR)*V1(VELY_VAR)*V1(VELZ_VAR))*cotan) * invr
 #endif

    else
        !! Use this for 1D spherical and 2D cylindrical case with/without MHD.
        !! Calculate geometrical source terms.  See S&O 75.
        Sgeo(HY_XMOM) = (V1(DENS_VAR)*V1(VELZ_VAR)*V1(VELZ_VAR) + alpha*V1(PRES_VAR)) / xCenter(i)!T phi,phi
        Sgeo(MOM_PHI) =  V1(DENS_VAR)*V1(VELZ_VAR)*V1(VELX_VAR) / xCenter(i)!T phi,r
 #ifdef SPARK_GLM
              ! P* is the total Pressure
              ! This presently does not work for POLAR coordinates
              Sgeo(HY_XMOM) = Sgeo(HY_XMOM) - (V1(MAGZ_VAR)**2 - alpha*V1(MAGP_VAR))/ xCenter(i)
              Sgeo(MOM_PHI) = Sgeo(MOM_PHI) - V1(MAGZ_VAR)*V1(MAGX_VAR) / xCenter(i)
              Sgeo(MAG_PHI) = - (V1(VELZ_VAR)*V1(MAGX_VAR) - V1(MAGZ_VAR)*V1(VELX_VAR)) / xCenter(i) !O phi,r
 #endif
              Sgeo(MOM_PHI) = - Sgeo(MOM_PHI)
              if (geometry == SPHERICAL) then
                 Sgeo(HY_XMOM) = Sgeo(HY_XMOM) + U1(MOM_THT)**2/V1(DENS_VAR) / xCenter(i)
                 ! Sgeo = Sgeo*dx/dx_sph
                 Sgeo = Sgeo*dx * (3.*xCenter(i)**2) / (xRight(i)**3 - xLeft(i)**3)
              endif
         endif
         if (xCenter(i) < 0.0) then
             facMx = 0.
             facPx = 0.
             if (geometry == SPHERICAL) then
                facMy = 0.
                facPy = 0.
             end if
             facMz = 0.
             facPz = 0.
             Sgeo = 0.
         end if


[hy_gravSources]
args = U1
definition=
    Shy_grv = 0.
 #ifdef GRAVITY
    Shy_grv(HY_XMOM:HY_ZMOM) = U1(HY_MASS)*grav(:,i,j,k)
    Shy_grv(HY_ENER) = dot_product(U1(HY_XMOM:HY_ZMOM),grav(:,i,j,k))
 #endif

