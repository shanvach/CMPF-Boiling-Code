!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.

#include "Simulation.h"
#include "constants.h"

subroutine hy_advance(simTime, dt, dtOld)

  use Grid_interface,      ONLY : Grid_getDeltas,&
                                  Grid_zeroFluxData, &
                                  Grid_getBlkPtr,&
                                  Grid_releaseBlkPtr,&
                                  Grid_getLeafIterator, Grid_releaseLeafIterator,&
                                  Grid_getMaxRefinement, Grid_conserveFluxes, Grid_putFluxData
  use Timers_interface,    ONLY : Timers_start, Timers_stop
  use hy_interface,        ONLY : hy_computeFluxes, hy_updateSolution
  use hy_memInterface,     ONLY : hy_memAllocScratch,      &
                                  hy_memDeallocScratch
  use leaf_iterator, ONLY : leaf_iterator_t
  use block_metadata, ONLY : block_metadata_t
  use Hydro_data, ONLY : hy_fluxCorrect, hy_fluxCorrectPerLevel
  use Hydro_data, ONLY : hy_threadBlockList

  implicit none

  real, intent(IN) ::  simTime, dt, dtOld

  integer, dimension(LOW:HIGH,MDIM) :: blkLimits,blkLimitsGC
  real,pointer,dimension(:,:,:,:) :: Uout, Uin
  real,dimension(MDIM) :: del

  integer,save :: sweepDummy = SWEEP_ALL

  integer:: level, maxLev
  
  type(leaf_iterator_t)  :: itor
  type(block_metadata_t) :: blockDesc

  call Grid_zeroFluxData

#define USE_NOFLUXCORR_SHORTCUT

#ifdef USE_NOFLUXCORR_SHORTCUT
  ! ***** FIRST VARIANT: OPTIMIZED (somewhat) FOR hy_fluxCorrect==.FALSE. *****
  if (.NOT. hy_fluxCorrect) then
     !$omp parallel if(hy_threadBlockList) &
     !$omp default(private) &
     !$omp private(itor,blockDesc,level,blkLimits,blkLimitsGC,&
     !$omp Uin,del,Uout) &
     !$omp shared(simTime,dt,dtOld,sweepDummy)
     call Grid_getLeafIterator(itor)
     call Timers_start("hy_advance")
     do while(itor%is_valid())
        call itor%blkMetaData(blockDesc)

        level            = blockDesc%level
        blkLimits(:,:)   = blockDesc%limits
        blkLimitsGC(:,:) = blockDesc%limitsGC

        call Grid_getBlkPtr(blockDesc, Uin)

        call Grid_getDeltas(level,del)
        Uout => Uin             ! hy_computeFluxes will ALSO update the solution through the Uout pointer!
        call hy_computeFluxes(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
!!$        call hy_updateSolution(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
        call Grid_releaseBlkPtr(blockDesc, Uin)
        call itor%next()
     end do
     call Timers_stop("hy_advance")
     call Grid_releaseLeafIterator(itor)
     !$omp end parallel

     RETURN                     ! DONE, return from here!
  end if
#endif

  call Grid_getMaxRefinement(maxLev,mode=1) !mode=1 means lrefine_max, which does not change during sim.

!!$  call hy_memAllocScratch(SCRATCH_CTR,HY_VAR1_SCRATCHCTR_VAR,2, 0,0,0) !for scrch_Ptr - done in Hydro_prepareBuffers

  ! ***** SECOND VARIANT: FOR hy_fluxCorrectPerLevel==.FALSE. *****
  if (.NOT. hy_fluxCorrectPerLevel) then

     call Timers_start("compute fluxes")
     call Grid_getLeafIterator(itor)
     do while(itor%is_valid())
        call itor%blkMetaData(blockDesc)

        level            = blockDesc%level
        blkLimits(:,:)   = blockDesc%limits
        blkLimitsGC(:,:) = blockDesc%limitsGC

        call Grid_getBlkPtr(blockDesc, Uin)

        call Grid_getDeltas(level,del)
        if (level==maxLev) then
           Uout => Uin             ! hy_computeFluxes will ALSO update the solution through the Uout pointer!
        else
           nullify(Uout)           ! Uout is not needed yet.
        end if
        call hy_computeFluxes(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
        call Grid_releaseBlkPtr(blockDesc, Uin)
        call itor%next()
     end do
     call Timers_stop("compute fluxes")
     call Grid_releaseLeafIterator(itor)

     if (hy_fluxCorrect) then
        call Grid_putFluxData(level=UNSPEC_LEVEL)
        call Timers_start("conserveFluxes")
        call Grid_conserveFluxes(ALLDIR,UNSPEC_LEVEL)
        call Timers_stop("conserveFluxes")
     end if

     call Grid_getLeafIterator(itor)
     call Timers_start("update solution")
     do while(itor%is_valid())
        call itor%blkMetaData(blockDesc)

        level            = blockDesc%level
        if (level==maxLev) then
           call itor%next()
           CYCLE
        end if
        blkLimits(:,:)   = blockDesc%limits
        blkLimitsGC(:,:) = blockDesc%limitsGC

        call Grid_getBlkPtr(blockDesc, Uout)

        call Grid_getDeltas(level,del)
        Uin => Uout
        call hy_updateSolution(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
        call Grid_releaseBlkPtr(blockDesc, Uout)
        call itor%next()
     end do
     call Timers_stop("update solution")
     call Grid_releaseLeafIterator(itor)

!!$     call hy_memDeallocScratch(SCRATCH_CTR) !done in Hydro_freeBuffers
     RETURN                     ! DONE, return from here!
  end if


  ! ***** THIRD VARIANT: FOR hy_fluxCorrectPerLevel==.TRUE. *****

  !$omp parallel if(hy_threadBlockList) &
  !$omp default(private) &
  !$omp private(itor,blockDesc,level,del,blkLimits,blkLimitsGC,&
  !$omp Uin,Uout) &
  !$omp shared(hy_fluxCorrect,maxLev,simTime,dt,dtOld,sweepDummy)
  do level= maxLev,1,-1
#ifdef DEBUG_DRIVER
     print*,' ***************   HYDRO LEVEL', level,'  **********************'
#endif
     !! if(hy_fluxCorrectPerLevel) then
     !! if(level !=maxLev) then
     !!   do a synchronization step here
     !!        if(hy_fluxCorrectPerLevel)call Grid_conserveFluxes(ALLDIR,level)
     
     call Timers_start("compute fluxes")
     call Grid_getDeltas(level,del)
     call Grid_getLeafIterator(itor, level=level)
     do while(itor%is_valid())
        call itor%blkMetaData(blockDesc)
        
        blkLimits(:,:)   = blockDesc%limits
        blkLimitsGC(:,:) = blockDesc%limitsGC
        
        call Grid_getBlkPtr(blockDesc, Uin)
        
        if (level==maxLev) then
           Uout => Uin             ! hy_computeFluxes will ALSO update the solution through the Uout pointer!
        else
           nullify(Uout)           ! Uout is not needed yet.
        end if
        call hy_computeFluxes(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
        call Grid_releaseBlkPtr(blockDesc, Uin)
        call itor%next()
     end do
     call Grid_releaseLeafIterator(itor)
     !$omp barrier
     call Timers_stop("compute fluxes")

     !$omp single
     if (hy_fluxCorrect .AND. (level > 1))  call Grid_putFluxData(level)
     !$omp end single

     if (level==maxLev) then
        CYCLE
     end if

     !$omp single
     if (hy_fluxCorrect) then
        call Timers_start("conserveFluxes")
        call Grid_conserveFluxes(ALLDIR,level)
        call Timers_stop("conserveFluxes")
     end if
     !$omp end single

     call Grid_getLeafIterator(itor, level=level, tiling=.TRUE.)
     call Timers_start("update solution")
     do while(itor%is_valid())
        call itor%blkMetaData(blockDesc)
        
        blkLimits(:,:)   = blockDesc%limits
        blkLimitsGC(:,:) = blockDesc%limitsGC
        
        call Grid_getBlkPtr(blockDesc, Uout)
        
        Uin => Uout
        call hy_updateSolution(blockDesc,blkLimitsGC,Uin, blkLimits, Uout, del,simTime, dt, dtOld,  sweepDummy)
        call Grid_releaseBlkPtr(blockDesc, Uout)
        call itor%next()
     end do
     call Timers_stop("update solution")
     call Grid_releaseLeafIterator(itor)

#ifdef DEBUG_DRIVER
     print*, 'return from Hydro/MHD timestep'  ! DEBUG
     print*,'returning from hydro myPE=',dr_globalMe
#endif


  end do
  !$omp end parallel

!!$  call hy_memDeallocScratch(SCRATCH_CTR) ! done in Hydro_freeBuffers
  
end subroutine hy_advance
