!!****if* source/Simulation/SimulationMain/Sedov/Grid_computeUserVars
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!! NAME
!!  Grid_computeUserVars
!!
!!
!! SYNOPSIS
!!
!!  call Grid_computeUserVars()
!!
!!
!! DESCRIPTION
!!
!!  Prepare user variables for output.
!!
!!  This routine is always a stub unless the user adds a source file
!!  to their simulations directory.
!!  The routine allows users to compute their own variables. Some
!!  examples are vorticity, conductivity, etc.
!!
!!
!! ARGUMENTS
!!  none
!!
!! EXAMPLE
!!
!!
!!
!! NOTES
!!
!!***

subroutine Grid_computeUserVars()
  use Simulation_data,      ONLY: sim_analyticGen, &
                                  sim_threadBlockList
  use Simulation_interface, ONLY: Simulation_computeAnalytical
  use Driver_data,         ONLY : dr_simGeneration
  use Timers_interface, ONLY : Timers_start, Timers_stop
  use Grid_interface, ONLY : Grid_getTileIterator, &
                             Grid_releaseTileIterator, &
                             Grid_getCellVolumes
  use Driver_interface, ONLY: Driver_getSimTime, &
                              Driver_abort
!  use Grid_data, ONLY : gr_meshMe
  use Grid_iterator, ONLY : Grid_iterator_t
  use Grid_tile, ONLY : Grid_tile_t 
  implicit none

#include "Simulation.h"
#include "constants.h"

  real    :: tnew
  integer :: simGen
  type(Grid_iterator_t) :: itor
  type(Grid_tile_t) :: tileDesc

  integer,dimension(2,MDIM) :: bl
  real, pointer, dimension(:,:,:,:) :: solnData
  real,allocatable :: cellVol(:,:,:)


  call Timers_start("computeUserVars")
  call Driver_getSimTime(tnew, simGen)

  !$omp parallel if (sim_threadBlockList) &
  !$omp private(tileDesc,itor)&
  !$omp private(solnData)&
  !$omp shared(tnew)
  call Grid_getTileIterator(itor, LEAF)
  do while (itor%isValid())
     call itor%currentTile(tileDesc)

     NULLIFY(solnData)
     call tileDesc%getDataPtr(solnData, CENTER)
     call Simulation_computeAnalytical(solnData, tileDesc, tnew)

#if defined(DEND_VAR) || defined(PRSD_VAR) || defined(VLRD_VAR)
     bl = tileDesc%limits

#if defined(DENC_VAR) || defined(PRSC_VAR) || defined(VLRC_VAR)
     allocate( cellVol(bl(LOW,IAXIS):bl(HIGH,IAXIS), &
                       bl(LOW,JAXIS):bl(HIGH,JAXIS), &
                       bl(LOW,KAXIS):bl(HIGH,KAXIS)) )
     call Grid_getCellVolumes(tileDesc%level, &
                              lbound(cellVol), ubound(cellVol), cellVol)
#endif

!!$
#if defined(DEND_VAR) && defined(DENA_VAR)
     solnData(DEND_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          solnData(DENS_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) - &
          solnData(DENA_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#ifdef DENC_VAR
     solnData(DENC_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          abs(solnData(DEND_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))) * &
              cellVol(         bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#endif
#endif
!!$
#if defined(PRSD_VAR) && defined(PRSA_VAR)
     solnData(PRSD_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          solnData(PRES_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) - &
          solnData(PRSA_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#ifdef PRSC_VAR
     solnData(PRSC_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          abs(solnData(PRSD_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))) * &
              cellVol(         bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#endif
#endif
!!$
#if defined(VLRD_VAR) && defined(VLXA_VAR)
     solnData(VLRD_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          solnData(VELX_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) - &
          solnData(VLXA_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#ifdef VLRC_VAR
     solnData(VLRC_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS)) = &
          abs(solnData(VLRD_VAR,bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))) * &
              cellVol(         bl(1,IAXIS):bl(2,IAXIS),bl(1,JAXIS):bl(2,JAXIS),bl(1,KAXIS):bl(2,KAXIS))
#endif
#endif

#if defined(DENC_VAR) || defined(PRSC_VAR) || defined(VLRC_VAR)
     deallocate( cellVol )
#endif

#endif
     call tileDesc%releaseDataPtr(solnData, CENTER)
     call itor%next()
  end do
  call Grid_releaseTileIterator(itor)
  !$omp end parallel

  dr_simGeneration = simGen + 1
  sim_analyticGen  = dr_simGeneration
  call Timers_stop("computeUserVars")

end subroutine Grid_computeUserVars

