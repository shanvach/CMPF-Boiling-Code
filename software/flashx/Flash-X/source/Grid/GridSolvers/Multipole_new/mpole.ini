[mpole_momUse]
definition =
                                gr_mpoleDrInv,                  &
                                gr_mpoleDrInnerZoneInv,         &
                                gr_mpoleMaxQ,                   &
                                gr_mpoleMaxRadialZones,         &
                                gr_mpoleMinRadialZone,          &
                                gr_mpoleZoneRmax,               &
                                gr_mpoleZoneQmax,               &
                                gr_mpoleZoneType,               &
                                gr_mpoleZoneScalarInv,          &
                                gr_mpoleZoneLogNormInv,         &
                                gr_mpoleZoneExponentInv,        &
                                gr_mpoleInnerZoneMaxR,          &
                                gr_mpoleInnerZoneDrRadii,       &
                                gr_mpoleInnerZoneQlower,        &
                                gr_mpoleInnerZoneQupper,        &
                                gr_mpoleInnerZoneResolution,    &
                                gr_mpoleInnerZoneResolutionInv, &
                                gr_mpoleOuterZoneQshift,        &
                                gr_mpoleQ,                      &
                                gr_mpoleQused,                  &
                                gr_mpoleQnumberOfCells,         &


[mpole_innerPotential]
definition =
 innerZonePotential = r <= gr_mpoleInnerZoneMaxR
 if (innerZonePotential) then
     rinDrs = r * gr_mpoleDrInnerZoneInv
     DrUnit = int (ceiling (rinDrs))
     Qlower = gr_mpoleInnerZoneQlower (DrUnit)
     Qupper = gr_mpoleInnerZoneQupper (DrUnit)
     do Q = Qlower,Qupper
        if (rinDrs <= gr_mpoleInnerZoneDrRadii (Q)) exit
     end do
 else
     do zone = gr_mpoleMinRadialZone, gr_mpoleMaxRadialZones
         if (r - gr_mpoleZoneRmax (zone) <= ZERO) exit
     end do
     rlocal = r - gr_mpoleZoneRmax    (zone - 1)
     type   = gr_mpoleZoneType        (zone)
     sclInv = gr_mpoleZoneScalarInv   (zone)
     expInv = gr_mpoleZoneExponentInv (zone)
     if (type == ZONE_EXPONENTIAL) then
         Qlocal = ceiling ( (rlocal * sclInv * gr_mpoleDrInv) ** expInv )
     else if (type == ZONE_LOGARITHMIC) then
         lgnInv = gr_mpoleZoneLogNormInv (zone)
         Qlocal = ceiling ( expInv * log (rlocal * sclInv * gr_mpoleDrInv * lgnInv + ONE) )
         end if
         Q = gr_mpoleZoneQmax (zone - 1) + Qlocal + gr_mpoleOuterZoneQshift
     end if

[mpole_sec1]
definition =
  do L = 2,gr_mpoleMaxL
     h = real (L + L - 1)
     g = real ((L - 1) * (L - 1))
     f = gr_mpoleNumberInv (L) * gr_mpoleNumberInv (L)
     Rc2 = (h * zR * Rc1 - rsqR * Rc0) * f        !  regular  solid harmonic for cos L0
     Ic2 = (h * zI * Ic1 -    g * Ic0) * rsqinvI  ! irregular solid harmonic for cos L0
     dampI = dampI * IdampingQuotient             ! next L damping
     dampR = dampR * RdampingQuotient             ! next L damping
     RdotI = Rc2 * (QfracI * gr_mpoleMomentI (L+1,Q) + QfracR * dampI * gr_mpoleMomentI (L+1,Q+1))
     IdotR = Ic2 * (QfracR * gr_mpoleMomentR (L+1,Q) + QfracI * dampR * gr_mpoleMomentR (L+1,Q-1))
     facePotential = facePotential + RdotI + IdotR
     Rc0 = Rc1                                    !
      Rc1 = Rc2                                    ! swap, to accumulate next L regular
     Ic0 = Ic1                                    ! and irregular solid harmonic
     Ic1 = Ic2                                    !
  end do