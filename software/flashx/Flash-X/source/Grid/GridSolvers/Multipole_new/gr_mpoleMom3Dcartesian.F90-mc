!!****if* source/Grid/GridSolvers/Multipole_new/gr_mpoleMom3Dcartesian
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!! NAME
!!
!!  gr_mpoleMom3Dcartesian
!!
!! SYNOPSIS
!!
!!  gr_mpoleMom3Dcartesian (integer (in) :: idensvar)
!!
!! DESCRIPTION
!!
!!  Prepares for evaluation of the moments in 3D cartesian geometry. In this
!!  routine, all the necessary arrays are prepared to enable evaluation of
!!  the moments in radial bin order. Each of the moments are grouped together
!!  according to their radial bins. This will ensure optimum unit stride values
!!  when accessing the big moment arrays and makes threading trivial.
!!
!! ARGUMENTS
!!
!!  idensvar : the index of the density variable
!!
!!***
!!NOVARIANTS
!!REORDER(4): Uin

subroutine gr_mpoleMom3Dcartesian (idensvar)

  @M iter_use
  use gr_mpoleInterface, ONLY : gr_mpoleMomBins3Dcartesian

  use gr_mpoleData,      ONLY : @M mpole_momUse
                                gr_mpoleQdataCells3D

  use gr_mpoleData,      ONLY : gr_mpoleXcenter,                &
                                gr_mpoleYcenter,                &
                                gr_mpoleZcenter

 
  implicit none
  
#include "Simulation.h"
#include "constants.h"
#include "gr_mpole.h"

  integer, intent (in) :: idensvar

  logical :: innerZonePotential

  integer :: DrUnit
  integer :: i,imin,imax
  integer :: j,jmin,jmax
  integer :: k,kmin,kmax
  integer :: maxCells
  integer :: nC, nQ
  integer :: Q, Qlocal, Qlower, Qupper
  integer :: type
  integer :: used
  integer :: zone
  
  integer, save :: maxQtype                ! for multithreading needs to be on stack (save)


  real    :: bndBoxILow, bndBoxJLow, bndBoxKLow
  real    :: cellDensity, cellMass, cellVolume
  real    :: DeltaI, DeltaIHalf
  real    :: DeltaJ, DeltaJHalf
  real    :: DeltaK, DeltaKHalf
  real    :: r, rlocal, rinDrs
  real    :: sclInv, expInv, lgnInv
  real    :: x,y,z

  real    :: bndBox (LOW:HIGH,1:MDIM)
  real,dimension(MDIM) :: deltas
  integer :: level
  
  @M iter_declare(tileLimits,tileLimitsGC,grownLimits,Uin)
!
!
!     ...The first pass over all tiles on the current processor will get us information
!        about how many different radial bin indices will be addressed and for each such
!        radial bin index, how many cells it will contain.
!
!
  !$omp single
  gr_mpoleQused (:) = 0 

  NULLIFY(Uin)
  @M iter_all_begin(LEAF,.false.,tileLimits,tileLimitsGC,deltas,Uin)     

     call tileDesc%boundBox(bndBox)
     imin       = tileLimits (LOW, IAXIS)
     jmin       = tileLimits (LOW, JAXIS)
     kmin       = tileLimits (LOW, KAXIS)  
     imax       = tileLimits (HIGH,IAXIS)
     jmax       = tileLimits (HIGH,JAXIS)
     kmax       = tileLimits (HIGH,KAXIS)

     DeltaI     = deltas (IAXIS)
     DeltaJ     = deltas (JAXIS)
     DeltaK     = deltas (KAXIS)
     DeltaIHalf = DeltaI * HALF
     DeltaJHalf = DeltaJ * HALF
     DeltaKHalf = DeltaK * HALF

     bndBoxILow = bndBox (LOW,IAXIS)
     bndBoxJLow = bndBox (LOW,JAXIS)
     bndBoxKLow = bndBox (LOW,KAXIS)

     z = bndBoxKLow + DeltaKHalf - gr_mpoleZcenter
     do k = kmin,kmax
      y = bndBoxJLow + DeltaJHalf - gr_mpoleYcenter
      do j = jmin,jmax
       x = bndBoxILow + DeltaIHalf - gr_mpoleXcenter
       do i = imin,imax

          r = sqrt (x * x + y * y + z * z)
          @M mpole_innerPotential

        gr_mpoleQused (Q) = gr_mpoleQused (Q) + 1

        x = x + DeltaI
       end do
       y = y + DeltaJ
      end do
      z = z + DeltaK
     end do

   @M iter_end(Uin)
     !
!
!     ...Create the arrays that will contain the radial info.
!
!
  maxQtype = count  (gr_mpoleQused /= 0)
  maxCells = maxval (gr_mpoleQused     )

  allocate (gr_mpoleQ              (1:maxQtype))
  allocate (gr_mpoleQnumberOfCells (1:maxQtype))
  allocate (gr_mpoleQdataCells3D   (1:maxCells , 1:maxQtype))
!
!
!     ...The second pass over all tiles on the current processor will scatter all
!        the radial bin information into the radial bin info array.
!
!
  gr_mpoleQused (:) = 0 

  nQ = 0

   @M iter_all_begin(LEAF,.FALSE.,tileLimits,tileLimitsGC,deltas, Uin)  

      call tileDesc%boundBox(bndBox)

     imin       = tileLimits (LOW, IAXIS)
     jmin       = tileLimits (LOW, JAXIS)
     kmin       = tileLimits (LOW, KAXIS)  
     imax       = tileLimits (HIGH,IAXIS)
     jmax       = tileLimits (HIGH,JAXIS)
     kmax       = tileLimits (HIGH,KAXIS)

     DeltaI     = deltas (IAXIS)
     DeltaJ     = deltas (JAXIS)
     DeltaK     = deltas (KAXIS)
     DeltaIHalf = DeltaI * HALF
     DeltaJHalf = DeltaJ * HALF
     DeltaKHalf = DeltaK * HALF

     bndBoxILow = bndBox (LOW,IAXIS)
     bndBoxJLow = bndBox (LOW,JAXIS)
     bndBoxKLow = bndBox (LOW,KAXIS)
!
!
!     ...Create all the cell info needed and place into proper radial bin array places.
!
!
     cellVolume = DeltaI * DeltaJ * DeltaK

     z = bndBoxKLow + DeltaKHalf - gr_mpoleZcenter
     do k = kmin,kmax
      y = bndBoxJLow + DeltaJHalf - gr_mpoleYcenter
      do j = jmin,jmax
       x = bndBoxILow + DeltaIHalf - gr_mpoleXcenter
       do i = imin,imax

        cellDensity = Uin (idensvar,i,j,k)
        cellMass    = cellDensity * cellVolume

        r = sqrt (x * x + y * y + z * z)
        @M mpole_innerPotential

        used = gr_mpoleQused (Q)

        if (used == 0) then

            nQ = nQ + 1

            gr_mpoleQused                (Q)             = nQ
            gr_mpoleQ                   (nQ)             = Q
            gr_mpoleQnumberOfCells      (nQ)             = 1
            gr_mpoleQdataCells3D      (1,nQ) % coord1    = x
            gr_mpoleQdataCells3D      (1,nQ) % coord2    = y
            gr_mpoleQdataCells3D      (1,nQ) % coord3    = z
            gr_mpoleQdataCells3D      (1,nQ) % cellMass  = cellMass
            gr_mpoleQdataCells3D      (1,nQ) % radius    = r

        else

            nC = gr_mpoleQnumberOfCells (used) + 1

            gr_mpoleQnumberOfCells    (used)             = nC
            gr_mpoleQdataCells3D   (nC,used) % coord1    = x
            gr_mpoleQdataCells3D   (nC,used) % coord2    = y
            gr_mpoleQdataCells3D   (nC,used) % coord3    = z
            gr_mpoleQdataCells3D   (nC,used) % cellMass  = cellMass
            gr_mpoleQdataCells3D   (nC,used) % radius    = r

        end if

        x = x + DeltaI
       end do
       y = y + DeltaJ
      end do
      z = z + DeltaK
     end do
   @M iter_end(Uin)
     !$omp end single
!
!
!    ...Call the radial bin clustered moment evaluation routine (all threads).
!
!
  call gr_mpoleMomBins3Dcartesian (maxQtype)
!
!
!    ...Deallocate used arrays.
!
!
!$omp single
  deallocate (gr_mpoleQ             )
  deallocate (gr_mpoleQnumberOfCells)
  deallocate (gr_mpoleQdataCells3D  )
!$omp end single
!
!
!    ...Ready!
!
!
  return
end subroutine gr_mpoleMom3Dcartesian
