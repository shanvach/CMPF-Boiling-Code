# FLASH makefile definitions for x86-64 Linux (GNU compilers)
#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------
SPACK_GCC=/home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-6.4.0

HDF5_PATH = ${SPACK_GCC}/hdf5-1.8.19-o37nepbsolbgwzs2qrqdfglr3tmhai2c
#HDF5_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/hdf5-1.8.19-tgq3sf66sw3agicwotbrgpvgtrfgdoie
#AMREX_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/amrex-master-6jw7hbzurjx3w7zq7yxdiulpn5w4czer
#AMREX_PATH = ${SPACK_GCC}/amrex-master-xavsjpdiznbgzuessdvwbb2yk4yorzdx
AMREX_PATH = /home/sauc/amrex/build-3d
HYPRE_PATH = ${SPACK_GCC}/hypre-2.10.0b-q7c6jt2acstfmxviujmeh57gxgxltvzs
#HYPRE_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/hypre-2.10.0b-7pe44q2taksk77wdoksdmbenoxtd3fyl
ZLIB_PATH  =

PAPI_PATH  =
PAPI_FLAGS =

SUPERLU_PATH = ${SPACK_GCC}/superlu-5.2.1-gitgrwfoft6ilqt76ifcr62v4hjkncmf
BLAS_PATH = ${SPACK_GCC}/openblas-0.2.20-3fdwz5zyh5vkcdr7q7h75xs7j6x5vde7
LIB_LAPACK=

LIB_NCMPI = /usr/local
MPE_PATH   =
MPI_PATH = ${SPACK_GCC}/mpich-3.2-lzsswghgolhsenaxyajs7zfoyr6ddj5t/bin
#MPI_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/openmpi-2.1.1-w6t2medqmrz2y2w6dyptgdbhkimvx2qx/bin

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------
FCOMP   = $(MPI_PATH)/mpif90
CCOMP   = $(MPI_PATH)/mpicc
CPPCOMP = $(MPI_PATH)/mpiCC
LINK    = $(MPI_PATH)/mpif90 -std=c++11

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

FFLAGS_OPT = -c -O2 -fdefault-real-8 -fdefault-double-8 -Wuninitialized
FFLAGS_DEBUG = -ggdb -c -O0 -fdefault-real-8 -fdefault-double-8 \
-pedantic -Wall -Wextra -Waliasing \
-Wsurprising -Wconversion -Wunderflow \
-ffpe-trap=invalid,zero,overflow -fbounds-check \
-fimplicit-none -fstack-protector-all \
-fbacktrace -fbounds-check

FFLAGS_TEST = -ggdb -c -fdefault-real-8 -fdefault-double-8 \
-ffree-line-length-none

FFLAGS_HYPRE = -I${HYPRE_PATH}/include
FFLAGS_AMREX = -I${AMREX_PATH}/include
FFLAGS_AMREX2D = ${FFLAGS_AMREX} -DN_DIM=2 -DNZB=1

#F90FLAGS = -I${HDF5_PATH}/include -DH5_USE_18_API
F90FLAGS = -I${HDF5_PATH}/include

#The macro _FORTIFY_SOURCE adds some lightweight checks for buffer
#overflows at both compile time and run time (only active at -O1 or higher)
#http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
CFLAGS_OPT = -c -O2 -Wuninitialized -D_FORTIFY_SOURCE=2

CFLAGS_DEBUG = -ggdb -c -O0 -Wno-div-by-zero -Wundef \
-Wconversion -Wstrict-prototypes -Wunreachable-code \
-pedantic -Wall -Wextra -Winit-self -ftree-vrp -Wfloat-equal \
-Wunsafe-loop-optimizations -Wpadded -fstack-protector-all

CFLAGS_TEST = -c

# Platform symbol
CDEFINES += -DDarwin

CFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_18_API
CFLAGS_NCMPI = -I$(LIB_NCMPI)/include

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -o
LFLAGS_DEBUG = -g -O0 -o
LFLAGS_TEST  = -o


#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

#LIB_HDF5  = -L/usr/local/lib -lhdf5 /usr/lib64/libz.a
LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5 -Wl,-rpath,$(HDF5_PATH)/lib

LIB_PAPI  =
LIB_MATH  =

LIB_MPI   = 
#LIB_NCMPI = -L $(NCMPI_PATH)/lib -lpnetcdf
LIB_MPE   =

LIB_HYPRE = -L${HYPRE_PATH}/lib -lHYPRE

LIB_AMREX = -L${AMREX_PATH}/lib -lamrex 
LIB_AMREX2D = ${LIB_AMREX}
LIB_STDCXX =
#LIB_STDCXX = -L/usr/lib/gcc/x86_64-linux-gnu/5.4.0 -lstdc++
LIB_STDCXX = -L/usr/include/c++/5 -lstdc++
#LIB_STDCXX = -L/home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/gcc-6.4.0-vh4t4mqp6q3xnzt3zht2dvhw7ikzbzfu/include/c++/6.4.0 -lstdc++ -Wl,-rpath,/home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/gcc-6.4.0-vh4t4mqp6q3xnzt3zht2dvhw7ikzbzfu/include/c++/6.4.0

LIB_BLAS = -L${BLAS_PATH}/lib -lopenblas -Wl,-rpath,${BLAS_PATH}/lib

LIB_SUPERLU = -L${SUPERLU_PATH}/lib -lsuperlu

LIB_LAPACK = $(LIB_BLAS) $(LIB_SUPERLU)

# Uncomment the following line to use electic fence memory debugger.
# Need the following environmental variable (see env.sh):
# export EF_ALLOW_MALLOC_0=1
#CONFIG_LIB = -L/usr/lib64 -lefence

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

#----------------------------------------------------------------------------
# Fake existence of iso_c_bindings module to prevent unnecessary recompilations.
#---------------------------------------------------------------------------- 
#ifeq ($(FLASHBINARY),true)
#iso_c_binding.mod :
#	touch $@
#endif
