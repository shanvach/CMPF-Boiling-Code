# FLASH makefile definitions for x86-64 Linux (GNU compilers)
#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

HDF5_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/hdf5-1.8.19-tgq3sf66sw3agicwotbrgpvgtrfgdoie
LIB_HDF5 = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/hdf5-1.8.19-tgq3sf66sw3agicwotbrgpvgtrfgdoie/lib
AMREX_PATH = ${HOME}/Projects/lib_install
HYPRE_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/hypre-2.10.0b-7pe44q2taksk77wdoksdmbenoxtd3fyl
MPI_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/openmpi-2.1.1-w6t2medqmrz2y2w6dyptgdbhkimvx2qx/bin

SUPERLU_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/superlu-5.2.1-viuzdwgywv3jaqfcxhrh25fx3mwhnrlw
BLAS_PATH = /home/sauc/Softwares/spack/opt/spack/linux-ubuntu16.04-x86_64/gcc-5.4.0/openblas-0.2.20-wvvffniytzrq4ay5ghonzqels6ygt6rd
LIB_LAPACK =



ZLIB_PATH  =

PAPI_PATH  =
PAPI_FLAGS =

LIB_NCMPI = /usr/local
MPE_PATH   =

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------
FCOMP   = $(MPI_PATH)/mpif90
CCOMP   = $(MPI_PATH)/mpicc
CPPCOMP = $(MPI_PATH)/mpic++
LINK    = $(MPI_PATH)/mpif90 -std=c++11

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

FFLAGS_OPT = -c -O2 -fdefault-real-8 -fdefault-double-8 -Wuninitialized
FFLAGS_DEBUG = -ggdb -c -O0 -fdefault-real-8 -fdefault-double-8 \
-pedantic -Wall -Wextra -Waliasing \
-Wsurprising -Wconversion -Wunderflow \
-ffpe-trap=invalid,zero,overflow -fbounds-check \
-fimplicit-none -fstack-protector-all

FFLAGS_TEST = -ggdb -c -fdefault-real-8 -fdefault-double-8 \
-ffree-line-length-none


FFLAGS_HYPRE = -I${HYPRE_PATH}/include
#FFLAGS_AMREX = -I${AMREX_PATH}/include
#FFLAGS_AMREX2D = ${FFLAGS_AMREX} -DN_DIM=2 -DNZB=1

#F90FLAGS = -I${HDF5_PATH}/include -DH5_USE_18_API
F90FLAGS = -I${HDF5_PATH}/include

#The macro _FORTIFY_SOURCE adds some lightweight checks for buffer
#overflows at both compile time and run time (only active at -O1 or higher)
#http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
CFLAGS_OPT = -c -O2 -Wuninitialized -D_FORTIFY_SOURCE=2

CFLAGS_DEBUG = -ggdb -c -O0 -Wno-div-by-zero -Wundef \
-Wconversion -Wstrict-prototypes -Wunreachable-code \
-pedantic -Wall -Wextra -Winit-self -ftree-vrp -Wfloat-equal \
-Wunsafe-loop-optimizations -Wpadded -fstack-protector-all

CFLAGS_TEST = -c

# Platform symbol
CDEFINES += -DDarwin

CFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_18_API
CFLAGS_NCMPI = -I$(LIB_NCMPI)/include

CFLAGS_SUPERLU = -I${SUPERLU_PATH}/include
FFLAGS_SUPERLU = -I${SUPERLU_PATH}/include

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -o
LFLAGS_DEBUG = -g -O0 -o
LFLAGS_TEST  = -o


#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

# option -lmpicxx is added so that the fortran compiler (mpif90) during linking will 'know' the cxx libraries. Otherwise it will give error if cxx files are included there for specific compilers when openMPI wrapper compilers mpifort and mpic++ link to different MPI libraries. You can check this with the -showme:libs. 
# https://stackoverflow.com/questions/35164095/calling-c-from-fortran-with-openmpi
LIB_OPT   = -lmpi_cxx
LIB_DEBUG = -lmpi_cxx
LIB_TEST  =

#LIB_HDF5  = -L/usr/local/lib -lhdf5 /usr/lib64/libz.a
#LIB_HDF5  = -Wl,-rpath -L${HDF5_PATH}/lib -lhdf5
#LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5
LIB_HDF5  = -L$(HDF5_PATH)/lib -lhdf5 -Wl,-rpath,$(HDF5_PATH)/lib

LIB_PAPI  =
LIB_MATH  =

LIB_MPI   = 
#LIB_NCMPI = -L $(NCMPI_PATH)/lib -lpnetcdf
LIB_MPE   =

LIB_HYPRE = -L${HYPRE_PATH}/lib -lHYPRE

LIB_AMREX = -L${AMREX_PATH}/lib -lamrex 
LIB_AMREX2D = ${LIB_AMREX}
LIB_STDCXX =
#LIB_STDCXX = -L/usr/lib -lc++

LIB_BLAS = -L${BLAS_PATH}/lib -lopenblas -Wl,-rpath,${BLAS_PATH}/lib 

LIB_SUPERLU      = -L${SUPERLU_PATH}/lib -lsuperlu

#Specify TEC_PLOT=YES in order to link the tec plot library.
TEC_PLOT=YES
ifeq ($(TEC_PLOT), YES)
#CONFIG_LIB = -I${setup_dir}/../source/Simulation/SimulationMain/INavierStokes -L${setup_dir}/../source/Simulation/SimulationMain/INavierStokes -ltecio -lstdc++ 
CONFIG_LIB = -I${setup_dir}/../source/Simulation/SimulationMain/INavierStokes/tecio/tecsrc ../source/Simulation/SimulationMain/INavierStokes/tecio64.a -lstdc++ $(HDF5_PATH)/lib/libhdf5_fortran.a
endif

LIB_KPD = ./umf4_f77wrapper.o ./libamd.a ./libumfpack.a -lblas

# Uncomment the following line to use electic fence memory debugger.
# Need the following environmental variable (see env.sh):
# export EF_ALLOW_MALLOC_0=1
#CONFIG_LIB = -L/usr/lib64 -lefence

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

#----------------------------------------------------------------------------
# Fake existence of iso_c_bindings module to prevent unnecessary recompilations.
#---------------------------------------------------------------------------- 
ifeq ($(FLASHBINARY),true)
iso_c_binding.mod :
	touch $@
endif
