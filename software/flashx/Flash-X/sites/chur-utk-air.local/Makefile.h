# FLASH makefile definitions for x86-64 apple darwin (GNU compilers)
#
#----------------------------------------------------------------------------

# Programming environment GNU or INTEL:
PE_ENV = GNU

MPI_PATH   = /usr/local

HDF5_PATH  = /usr/local/Cellar/hdf5/1.12.0_1

BLAS_PATH  = /usr/local/Cellar/openblas/0.3.10_1

LAPACK_PATH= /usr/local/Cellar/lapack/3.9.0_1

AMREX_DIR  = /Users/ranchu/FLASHOR/amrex
AMREX_PATH = ${AMREX_DIR}/amrex_${NDIM}D

# Current directory:
export cur-dir := $(shell pwd)

# Set the location of top directory
export setup_dir = $(cur-dir)

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------

FCOMP   = ${MPI_PATH}/bin/mpifort
CCOMP   = ${MPI_PATH}/bin/mpicc
CPPCOMP = ${MPI_PATH}/bin/mpicxx
LINK    = ${MPI_PATH}/bin/mpifort

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

# GNU Flags:
OPT_FLAGS    = -O3 -fdefault-real-8 -fdefault-double-8 \
               -ffree-line-length-none -Wuninitialized -fallow-argument-mismatch
TEST_FLAGS   = -g -O3
DEBUG_FLAGS  = -g -Og

FFLAGS_OPT   = -c ${OPT_FLAGS}
FFLAGS_TEST  = -c ${TEST_FLAGS}
FFLAGS_DEBUG = -c ${DEBUG_FLAGS} -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow -fbacktrace

#FFLAGS_DEBUG = -g3 -c -fdefault-real-8 -fdefault-double-8 \
#-ffree-line-length-none -Wuninitialized \
#-fbacktrace -static -debug

#FFLAGS_DEBUG = -ggdb -c -fdefault-real-8 -fdefault-double-8 \
#-fallow-argument-mismatch -ffree-line-length-none \
#-ffpe-trap=invalid,zero,overflow -fbounds-check \
#-fbacktrace -fdump-core -finit-real=nan \
#-finit-integer=-999999 -fimplicit-none
#
#FFLAGS_TEST =  -c -fdefault-real-8 -fdefault-double-8 \
#-ffree-line-length-none

CFLAGS_OPT    = -c -Wno-implicit-function-declaration
CFLAGS_TEST   = -c ${TEST_FLAGS}
CFLAGS_DEBUG  = -c ${DEBUG_FLAGS}

#CFLAGS_DEBUG = -c -g
#CFLAGS_TEST  = -c


#If we are using HDF5, we need to specify the path to the include files

FFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_18_API
CFLAGS_HDF5 = -I${HDF5_PATH}/include -DH5_USE_18_API

FLAGS_MPI   = -I$(MPI_PATH)/include

CFLAGS_BLAS = -I${BLAS_PATH}/include 
FFLAGS_BLAS = -I${BLAS_PATH}/include 

CFLAGS_LAPACK = -I${LAPACK_PATH}/include
FFLAGS_LAPACK = -I${LAPACK_PATH}/include

CFLAGS_SUPERLU = -I${SUPERLU_PATH}/include
FFLAGS_SUPERLU = -I${SUPERLU_PATH}/include

CFLAGS_HYPRE = -I${HYPRE_PATH}/include
FFLAGS_HYPRE = -I${HYPRE_PATH}/include

CFLAGS_AMREX = -I${AMREX_PATH}/include
FFLAGS_AMREX = -I${AMREX_PATH}/include
#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -O3 -o
LFLAGS_DEBUG = -o
LFLAGS_TEST  = -O3 -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_MPI   =

LIB_HDF4  = 
LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5_fortran -lhdf5 -lz

LIB_MATH  = -lm
LIB_NCMPI = -L${NCMPI_PATH}/lib -lpnetcdf
LIB_MPE   =

LIB_BLAS    = ${BLAS_PATH}/lib/libopenblas.dylib
LIB_LAPACK  = ${LAPACK_PATH}/lib/liblapacke.dylib -llapack -lblas
LIB_SUPERLU = -L${SUPERLU_PATH}/lib -lsuperlu_4.3 ${BLAS_PATH}/lib/libopenblas.a
LIB_HYPRE   = -L${HYPRE_PATH}/lib -lHYPRE ${LIB_LAPACK}
LIB_STDCXX  = -lstdc++
LIB_AMREX   = -L${AMREX_PATH}/lib -lamrex -lstdc++

#Specify TEC_PLOT=YES in order to link the tec plot library.
TEC_PLOT=NO
TEC_DIR=/groups/balarasgrp/Software/TecioLib
ifeq ($(TEC_PLOT), YES)
  CONFIG_LIB = -I${TEC_DIR} -L${TEC_DIR}  -ltecio 
endif

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = xiar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

ifeq ($(FLASHBINARY),true)


FFLAGS_WO_WARNALL = $(patsubst -pedantic,,$(FFLAGS))

#Files mix and match assumed shape arrays, assumed size arrays
#and scalars in function calls.  This is fine but it is viewed as
#a problem when using strict type checking compiler options.
fftpack.o : %.o : %.f90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<
gr_pfftDcftForward.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<
gr_pfftDcftInverse.o : %.o : %.F90
	$(FCOMP) $(FFLAGS_WO_WARNALL) $(FDEFINES)       $<

endif

