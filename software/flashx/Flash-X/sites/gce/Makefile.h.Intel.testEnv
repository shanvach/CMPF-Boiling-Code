# Flash-X makefile definitions for using the Intel compiler suite with the
# testing environment setup by the Flash-X/Flash-X-TestEnv GitHub 
# repository.  Refer to the GCE-specific README in that repo for
# information regarding compatible machines and how to setup the 
# software environment.
#
# NOTE: This software environment is updated without warning as needed by the
# Flash-X GCE Test gatekeepers.
#----------------------------------------------------------------------------
# Set the AMReX library path -- manual installation for multiple variants
#----------------------------------------------------------------------------
AMREX_PATH=${FLASHX_AMREX${NDIM}D_DIR}

#MILHOJA_PATH=${FLASHX_MILHOJA${NDIM}D_DIR}
#Try same path as for GCC:
MILHOJA_PATH=/nfs/gce/projects/FLASH5/kweide/local-milhoja/${NDIM}d

#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths
#----------------------------------------------------------------------------
HYPRE_PATH =
ZLIB_PATH  =
PAPI_PATH  =
PAPI_FLAGS =
LIB_NCMPI = /usr
MA28_PATH = ${FLASHX_MA28_DIR}

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the parallel HDF5 wrappers which use the mpiXX compiler wrappers 
#   -- these will automatically load the proper libraries and include files.
#----------------------------------------------------------------------------
FCOMP   = h5pfc
CCOMP   = h5pcc
CPPCOMP = mpicxx -std=c++17
LINK    = h5pfc

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

OPENMP = -qopenmp

FFLAGS_OPT = -c -O2 -r8 -real-size 64 -check uninit
FFLAGS_DEBUG = -ggdb -c -O0 -r8 -real-size 64 \
	-warn all -diag-disable 10120 \
	-check output_conversion -Wunderflow \
	-ffpe-trap=invalid,zero,overflow -check bounds \
	-fimplicit-none -fp-stack-check \
	-traceback -check bounds 
FFLAGS_TEST = -O1 -c -r8 -real-size 64 \
	 -stand f18 -no-wrap-margin \
	 -fminshared -assume buffered_stdout
FFLAGS_HYPRE = -I${HYPRE_PATH}/include
CFLAGS_HYPRE = -I${HYPRE_PATH}/include
FFLAGS_AMREX = -I${AMREX_PATH}/include
# Include -auto so that Fortran routines are thread-safe.  Never use -save.
# https://www.intel.com/content/www/us/en/developer/articles/technical/threading-fortran-applications-for-parallel-performance-on-multi-core-systems.html
# TODO: It seems like the setup tool should add in this flag so that our users
# don't need to know this.  The setup tool could add in a WARNING so that they
# are made aware.  Similarly, it would need to add -Mrecursive for NVHPC.
FFLAGS_MILHOJA = -I${MILHOJA_PATH}/include -fexceptions -auto
FFLAGS_MILHOJA_AMREX = -I${MILHOJA_PATH}/include -fexceptions -auto ${FFLAGS_AMREX}

F90FLAGS = -DHAVE_MPI_MODULE -DH5_USE_18_API

#The macro _FORTIFY_SOURCE adds some lightweight checks for buffer
#overflows at both compile time and run time (only active at -O1 or higher)
#http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
CFLAGS_OPT   = -c -O3 -g -D_LARGEFILE64_SOURCE -D_FORTIFY_SOURCE=2 \
-diag-disable 10120
CFLAGS_DEBUG = -ggdb -c -O0 -Wundef \
	-Wconversion -Wstrict-prototypes -Wunreachable-code \
	-Winit-self -Wfloat-equal \
	-fp-stack-check
CFLAGS_TEST = -c

CFLAGS_HDF5 = -DH5_USE_18_API
CFLAGS_NCMPI = -I$(LIB_NCMPI)/include
CFLAGS_AMREX = -I${AMREX_PATH}/include
CFLAGS_MILHOJA = -I${MILHOJA_PATH}/include
CFLAGS_MILHOJA_AMREX = -I${MILHOJA_PATH}/include ${CFLAGS_AMREX}

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -o
LFLAGS_DEBUG = -g -O0 -o
LFLAGS_TEST  = -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a Flash-X source directory has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when Flash-X is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how Flash-X was setup.
#
#  Mostly handled by loading modules with Spack and h5pXX wrappers.
#----------------------------------------------------------------------------

LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

LIB_OACC  =
LIB_HDF5  =
LIB_PAPI  =
LIB_MATH  =
LIB_MPI   =
LIB_MPE   =
LIB_HYPRE = -L$(HYPRE_PATH)/lib -lHYPRE
LIB_AMREX = -L${AMREX_PATH}/lib -lamrex -lpthread
LIB_BITTREE =
LIB_STDCXX = -lstdc++
LIB_LAPACK= -llapack -lblas
LIB_MA28 = -L$(MA28_PATH) -lma28
# setup tool presently lists AMReX before Milhoja.  Since Milhoja depends on
# AMReX, we have to manually list AMReX afterward so that the linker finds
# all dependencies.
LIB_MILHOJA = -L${MILHOJA_PATH}/lib -lmilhoja -lpthread -lamrex
LIB_MILHOJA_AMREX = -L${MILHOJA_PATH}/lib -lmilhoja -lpthread ${LIB_AMREX}

# Uncomment the following line to use electic fence memory debugger.
# Need the following environmental variable (see env.sh):
# export EF_ALLOW_MALLOC_0=1
#CONFIG_LIB = -L/usr/lib64 -lefence

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when Flash-X is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

