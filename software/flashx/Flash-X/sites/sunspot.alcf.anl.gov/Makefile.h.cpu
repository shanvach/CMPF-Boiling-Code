# FLASH makefile definitions for sunspot.lcf.anl.gov
#----------------------------------------------------------------------------
# Set the AMReX library path -- manual installation for multiple variants
#----------------------------------------------------------------------------

AMREX_PATH=${AMREX_ROOT}

#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- managed by loading with softenv
#----------------------------------------------------------------------------

HDF5_PATH  = ${HDF5_ROOT}
HYPRE_PATH = ${HYPRE_ROOT}
ZLIB_PATH  =
PAPI_PATH  =
PAPI_FLAGS =
NCMPI_PATH  = /usr/local
MPI_PATH   = ${MPI_ROOT}
NCMPI_PATH = #${MPI_ROOT}

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the parallel HDF5 wrappers which use the mpiXX compiler wrappers 
#   -- these will automatically load the proper libraries and include files.
#----------------------------------------------------------------------------

FCOMP   = mpifort -fc=ifx -fPIC -fpp -xCore-AVX512
CCOMP   = mpicc
CPPCOMP = mpicxx -std=c++11
LINK    = mpifort -fc=ifx -fopenmp -fiopenmp

#-fPIC -fpp -xCore-AVX512

# pre-processor flag
PP      = -D

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

OPENMP = -fiopenmp
#OPENMP_OL = ${OPENMP} -fopenmp-targets=spir64_gen -Xopenmp-target-backend "-device 12.60.7"
OPENMP_OL = ${OPENMP} 

FFLAGS_OPT = -c -O2 -r8 -i4 -fpp -g #-fno-omit-frame-pointer -qopt-multi-version-aggressive #-fpp #-Wuninitialized
FFLAGS_DEBUG = -g -c -O0 -r8 -i4 \
	-pedantic -Wall -Wextra -Waliasing \
	-Wsurprising -Wconversion -Wunderflow \
	-Wno-unused-parameter \
	-fcheck=bounds,do,mem,pointer \
	-ffpe-trap=invalid,zero,overflow \
	-fimplicit-none -fstack-protector-all \
	-fbacktrace -fbounds-check
FFLAGS_TEST = -g -c -O1 -r8 -i4 \
	-fcheck=bounds,do,mem,pointer \
	-ffpe-trap=invalid,zero,overflow \
	-fimplicit-none \
	-fbacktrace 

FFLAGS_HYPRE = -I${HYPRE_PATH}/include
FFLAGS_NCMPI = -I${NCMPI_PATH}/include
FFLAGS_AMREX = -I${AMREX_PATH}/include
#FFLAGS_HDF5 = -DH5_NO_DEPRECATED_SYMBOLS -I${HDF5_PATH}/include
FFLAGS_HDF5 =  -DH5_USE_18_API -I${HDF5_PATH}/include
FFLAGS_AMREX2D = ${FFLAGS_AMREX} -DN_DIM=2 -DNZB=1
FFLAGS_ONEMKL   = -I${MKLROOT}/include -qmkl -fpp
FFLAGS_OMP_OL= ${OPENMP_OL}

F90FLAGS = -DHAVE_MPI_MODULE

#The macro _FORTIFY_SOURCE adds some lightweight checks for buffer
#overflows at both compile time and run time (only active at -O1 or higher)
#http://gcc.gnu.org/ml/gcc-patches/2004-09/msg02055.html
CFLAGS_OPT = -c -O2 -Wuninitialized -D_FORTIFY_SOURCE=2
CFLAGS_DEBUG = -ggdb -c -O0 -Wno-div-by-zero -Wundef \
	-Wconversion -Wstrict-prototypes -Wunreachable-code \
	-pedantic -Wall -Wextra -Winit-self -ftree-vrp -Wfloat-equal \
	-Wunsafe-loop-optimizations -Wpadded -fstack-protector-all
CFLAGS_TEST = -c

# Platform symbol

CFLAGS_HYPRE = -I${HYPRE_PATH}/include
#CFLAGS_HDF5 = -DH5_NO_DEPRECATED_SYMBOLS  -I$(HDF5_PATH)/include
CFLAGS_HDF5 = -DH5_USE_18_API -I$(HDF5_PATH)/include
CFLAGS_NCMPI = -I$(NCMPI_PATH)/include
CFLAGS_AMREX = -I${AMREX_PATH}/include
CFLAGS_ONEMKL   = -I${MKLROOT}/include -qmkl 
CFLAGS_OMP_OL= ${OPENMP_OL}

#----------------------------------------------------------------------------
# Linker flags
#
#  There is a seperate version of the linker flags for each of the _OPT,
#  _DEBUG, and _TEST cases.
#----------------------------------------------------------------------------

LFLAGS_OPT   = -g -O2 -o
LFLAGS_DEBUG = -g -O0 -o
LFLAGS_TEST  = -g -O1 -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#
#  Mostly handled by loading modules with Spack and h5pXX wrappers.
#----------------------------------------------------------------------------

LIB_OPT   =
LIB_DEBUG =
LIB_TEST  =

LIB_HDF5  = -L$(HDF5_PATH)/lib -lhdf5_fortran -lhdf5
LIB_LAPACK = # -llapack -lblas
LIB_LAPACK = -L$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core
LIB_PAPI  =
LIB_MATH  =
LIB_MPI   = 
LIB_MPE   =
LIB_HYPRE =
LIB_AMREX = -L${AMREX_PATH}/lib -lamrex -lpthread
LIB_AMREX2D = ${LIB_AMREX}
LIB_STDCXX = -lstdc++

#LIB_ONEMKL  = -L${MKLROOT}/lib -qmkl -lmkl_sycl -lsycl -lOpenCL
#LIB_ONEMKL   = ${OPENMP_OL} -qmkl -lmkl_sycl -lsycl -lOpenCL
#LIB_ONEMKL   =  -qmkl -lmkl_sycl -lsycl -lOpenCL
LIB_ONEMKL   =  -L$(MKLROOT)/lib/intel64 -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core
LIB_AMREX = -L${AMREX_PATH}/lib -lamrex -lstdc++
LIB_NCMPI = -L${NCMPI_PATH}/lib -lpnetcdf
LIB_OMP_OL = ${OPENMP_OL} 

# Uncomment the following line to use electic fence memory debugger.
# Need the following environmental variable (see env.sh):
# export EF_ALLOW_MALLOC_0=1
#CONFIG_LIB = -L/usr/lib64 -lefence

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo

