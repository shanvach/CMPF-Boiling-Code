# FLASH makefile definitions for SummitDev

ifdef OLCF_GCC_ROOT
    PE_ENV=gcc
else ifdef OLCF_PGI_ROOT
    PE_ENV=pgi
else ifdef OLCF_XL_ROOT
    PE_ENV=xl
else
    $(error Cannot determine compiler module. \
	    Load the gcc, pgi, or xl module---e.g. "module load gcc" \
	    ---or specify a specific makefile with the setup argument---e.g. "-makefile=gcc")
endif

#----------------------------------------------------------------------------
# Set the HDF5/MPI library paths -- these need to be updated for your system
#----------------------------------------------------------------------------

MPI_PATH   = ${OLCF_OMPI_ROOT}
AMREX_PATH = ${AMREX_DIR}/summitdev_${NDIM}d_${PE_ENV}
HDF5_PATH  = ${OLCF_HDF5_ROOT}
HYPRE_PATH = ${OLCF_HYPRE_ROOT}
CUDA_PATH  = ${OLCF_CUDA_ROOT}
MAGMA_PATH = ${HOME}/magma-2.3.0/build/${PE_ENV}

ZLIB_PATH  =

PAPI_PATH  = ${OLCF_PAPI_ROOT}
PAPI_FLAGS =

NCMPI_PATH = ${OLCF_PARALLEL_NETCDF_ROOT}
MPE_PATH   =

ifdef OLCF_ESSL_ROOT
    HYPRE_VERSION = essl

    ESSL_PATH     = ${OLCF_ESSL_ROOT}
    CFLAGS_ESSL   = -I${ESSL_PATH}/include
    FFLAGS_ESSL   = -I${ESSL_PATH}/include
    LIB_ESSL      = -L${ESSL_PATH}/lib64 -lessl

    LAPACK_PATH   = ${ESSL_PATH}
    CFLAGS_LAPACK = ${CFLAGS_ESSL}
    FFLAGS_LAPACK = ${FFLAGS_ESSL}
    LIB_LAPACK    = ${LIB_ESSL}
else
    HYPRE_VERSION = default

    LAPACK_PATH   =
    CFLAGS_LAPACK =
    FFLAGS_LAPACK =
    LIB_LAPACK    =
endif

ifdef OLCF_NETLIB_LAPACK_ROOT
    LAPACK_PATH    = ${OLCF_NETLIB_LAPACK_ROOT}
    CFLAGS_LAPACK += -I${LAPACK_PATH}/include
    FFLAGS_LAPACK += -I${LAPACK_PATH}/include
    LIB_LAPACK    += -L${LAPACK_PATH}/lib64 -llapack -lblas
endif

#----------------------------------------------------------------------------
# Compiler and linker commands
#
#   Use the MPICH wrappers around the compilers -- these will automatically
#   load the proper libraries and include files.  Version of MPICH prior
#   to 1.2.2 (?) do not recognize .F90 as a valid Fortran file extension.
#   You need to edit mpif90 and add .F90 to the test of filename extensions,
#   or upgrade your MPICH.
#----------------------------------------------------------------------------

FCOMP   = mpifort
CCOMP   = mpicc
CPPCOMP = mpicxx
CUCOMP  = nvcc
LINK    = mpifort

#----------------------------------------------------------------------------
# Compilation flags
#
#  Three sets of compilation/linking flags are defined: one for optimized
#  code, one for testing, and one for debugging.  The default is to use the
#  _OPT version.  Specifying -debug to setup will pick the _DEBUG version,
#  these should enable bounds checking.  Specifying _TEST is used for
#  flash_test, and is set for quick code generation, and (sometimes)
#  profiling.  The Makefile generated by setup will assign the generic token
#  (ex. FFLAGS) to the proper set of flags (ex. FFLAGS_OPT).
#----------------------------------------------------------------------------

## Compiler-specific flags
ifdef OLCF_GCC_ROOT

    # pre-processor flag
    MDEFS        =
    PP           = -D

    # generic flags
    OPENMP       = -fopenmp

    OPT_FLAGS    = -g -Ofast -funroll-loops -fprefetch-loop-arrays
    TEST_FLAGS   = -g -O3
    DEBUG_FLAGS  = -g -Og

    # Fortran-specific flags
    OPT_FFLAGS   =
    TEST_FFLAGS  =
    DEBUG_FFLAGS = -fcheck=bounds,do,mem,pointer -ffpe-trap=invalid,zero,overflow -fbacktrace

    F90FLAGS     = -fdefault-real-8 -fdefault-double-8 -fimplicit-none -ffree-line-length-none -cpp
    f90FLAGS     = ${F90FLAGS}
    F77FLAGS     = -fdefault-real-8 -fdefault-double-8 -fimplicit-none -cpp
    f77FLAGS     = ${F77FLAGS}

    FFLAGS_OACC  = -fopenacc

    # C-specific flags
    OPT_CFLAGS   =
    TEST_CFLAGS  =
    DEBUG_CFLAGS =

    CFLAGS_OACC  = -fopenacc

    # Linker flags
    LIB_OPT      =
    LIB_TEST     =
    LIB_DEBUG    =

    LIB_OACC     =
    LIB_MASS     =

else ifdef OLCF_PGI_ROOT

    # pre-processor flag
    MDEFS        =
    PP           = -D

    # generic flags
    OPENMP       = -mp

    OPT_FLAGS    = -g -gopt -O1 -Mpreprocess
    TEST_FLAGS   = -g -gopt -O1 -Mpreprocess
    DEBUG_FLAGS  = -g -gopt -O0 -Mpreprocess -Mbounds -Mnoopenmp

    # Fortran-specific flags
    OPT_FFLAGS   =
    TEST_FFLAGS  =
    DEBUG_FFLAGS =

    F90FLAGS     = -r8 -i4
    f90FLAGS     = ${F90FLAGS}
    F77FLAGS     = -r8 -i4 -Mfixed
    f77FLAGS     = ${F77FLAGS}

    FFLAGS_OACC  = -acc -ta=tesla:cc60 -Minfo=accel

    # C-specific flags
    OPT_CFLAGS   =
    TEST_CFLAGS  =
    DEBUG_CFLAGS =

    CFLAGS_OACC  = -acc -ta=tesla:cc60 -Minfo=accel

    # Linker flags
    LIB_OPT      = -pgc++libs
    LIB_TEST     = -pgc++libs
    LIB_DEBUG    = -pgc++libs

    LIB_OACC     = -acclibs
    LIB_MASS     =

else ifdef OLCF_XL_ROOT

    # pre-processor flag
    MDEFS        = -WF,
    PP           = -D

    # generic flags
    OPENMP       = -qsmp=omp:noauto

    OPT_FLAGS    = -g -O3 -qarch=pwr8 -qtune=pwr8:st -w
    TEST_FLAGS   = -g -O2 -qarch=pwr8 -qtune=pwr8:st -w -qstrict=all
    DEBUG_FLAGS  = -g -O0 -qnosmp -qstrict=all \
	           -qfloat=rngchk -qcheck=all:nounset \
                   -qflttrap=enable:invalid:nanq:overflow:zerodivide -qsigtrap=xl__trcedump

    # Fortran-specific flags
    OPENMP_FORTRAN = ${OPENMP} -qnosave -qthreaded

    OPT_FFLAGS   =
    TEST_FFLAGS  =
    DEBUG_FFLAGS = -qflag=i:w

    F90FLAGS     = -qintsize=4 -qrealsize=8 -qzerosize -qport=c_loc -qundef -qsuppress=cmpmsg
    f90FLAGS     = ${F90FLAGS}
    F77FLAGS     = ${F90FLAGS} -qfixed
    f77FLAGS     = ${F77FLAGS}

    FFLAGS_OACC  =

    # C-specific flags
    OPENMP_C     = ${OPENMP}

    OPT_CFLAGS   = ${PP}IBM
    TEST_CFLAGS  = ${PP}IBM
    DEBUG_CFLAGS = ${PP}IBM

    CFLAGS_OACC  =

    # Linker flags
    OPENMP_LINK  = ${OPENMP} -qnosave -qthreaded

    LIB_OPT      =
    LIB_TEST     = -pg
    LIB_DEBUG    =

    LIB_OACC     =
    LIB_MASS     = -lmass

endif

## Compiler-independent flags
FFLAGS_OPT   = -c ${OPT_FLAGS} ${OPT_FFLAGS}
FFLAGS_TEST  = -c ${TEST_FLAGS} ${TEST_FFLAGS}
FFLAGS_DEBUG = -c ${DEBUG_FLAGS} ${DEBUG_FFLAGS}

FFLAGS_AMREX = -I${AMREX_PATH}/include
FFLAGS_HDF5  = -I${HDF5_PATH}/include ${MDEFS}${PP}H5_USE_18_API
FFLAGS_NCMPI = -I${NCMPI_PATH}/include
FFLAGS_HYPRE = -I${HYPRE_PATH}/include ${FFLAGS_LAPACK}
FFLAGS_CUDA  = -I${CUDA_PATH}/include
FFLAGS_MAGMA = -I${MAGMA_PATH}/include

CFLAGS_OPT   = -c ${OPT_FLAGS} ${OPT_CFLAGS}
CFLAGS_TEST  = -c ${TEST_FLAGS} ${TEST_CFLAGS}
CFLAGS_DEBUG = -c ${DEBUG_FLAGS} ${DEBUG_CFLAGS}

CFLAGS_AMREX = -I${AMREX_PATH}/include
CFLAGS_HDF5  = -I$(HDF5_PATH)/include ${PP}H5_USE_18_API
CFLAGS_NCMPI = -I$(NCMPI_PATH)/include
CFLAGS_HYPRE = -I${HYPRE_PATH}/include ${CFLAGS_LAPACK}
CFLAGS_CUDA  = -I${CUDA_PATH}/include
CFLAGS_MAGMA = -I${MAGMA_PATH}/include

CU_FLAGS     = -c -g -O2 -m64 -gencode arch=compute_60,code=sm_60

.SUFFIXES: .o .c .f .F .h .fh .F90 .f90 .cu

#----------------------------------------------------------------------------
# Linker flags
#----------------------------------------------------------------------------
LFLAGS_OPT   = ${OPT_FLAGS} -o
LFLAGS_TEST  = ${TEST_FLAGS} -o
LFLAGS_DEBUG = ${DEBUG_FLAGS} -o

#----------------------------------------------------------------------------
# Library specific linking
#
#  If a FLASH module has a 'LIBRARY xxx' line in its Config file, we need to
#  create a macro in this Makefile.h for LIB_xxx, which will be added to the
#  link line when FLASH is built.  This allows us to switch between different
#  (incompatible) libraries.  We also create a _OPT, _DEBUG, and _TEST
#  library macro to add any performance-minded libraries (like fast math),
#  depending on how FLASH was setup.
#----------------------------------------------------------------------------

LIB_MPI   =

LIB_STDCXX = -lstdc++
LIB_AMREX = -L${AMREX_PATH}/lib -lamrex -lstdc++
LIB_HDF5  = -L${HDF5_PATH}/lib -lhdf5_fortran -lhdf5
LIB_NCMPI = -L${NCMPI_PATH}/lib -lpnetcdf
LIB_MATH  = ${LIB_ESSL}
LIB_HYPRE = -L${HYPRE_PATH}/lib -lHYPRE ${LIB_LAPACK}
LIB_CUDA  = -L${CUDA_PATH}/lib64 -lcublas -lcudart -lcuda
LIB_MAGMA = -L$(MAGMA_PATH)/lib -lmagma -Wl,-rpath,$(MAGMA_PATH)/lib

#----------------------------------------------------------------------------
# Additional machine-dependent object files
#
#  Add any machine specific files here -- they will be compiled and linked
#  when FLASH is built.
#----------------------------------------------------------------------------

MACHOBJ =

#----------------------------------------------------------------------------
# Additional commands
#----------------------------------------------------------------------------

MV = mv -f
AR = ar -r
RM = rm -f
CD = cd
RL = ranlib
ECHO = echo
AWK = awk
CAT = cat

ifdef OLCF_XL_ROOT
ifeq ($(FLASHBINARY),true)

# add_block_to_tree subroutine in local_tree.F90 is called with the same argument twice.
# The arguments alias each other so we have to inform the compiler not to use unsafe
# optimisations (-qalias).  Required at -O4 optimisation level for correctness.
local_tree_module.mod local_tree.mod local_tree.o : local_tree.F90
	${FCOMP} ${FFLAGS} -qalias=nostd ${F90FLAGS} ${FDEFINES} $<

endif
endif
